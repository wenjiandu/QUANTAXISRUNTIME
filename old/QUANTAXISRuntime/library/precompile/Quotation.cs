// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quotation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QUANTAXISRuntimeQuotation {

  /// <summary>Holder for reflection information generated from quotation.proto</summary>
  public static partial class QuotationReflection {

    #region Descriptor
    /// <summary>File descriptor for quotation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuotationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9xdW90YXRpb24ucHJvdG8SG1FVQU5UQVhJU19SdW50aW1lX1F1b3RhdGlv",
            "biJ5Cg1xdW90YXRpb25fcmVxEhMKC2V4Y2hhbmdlX2lkGAEgASgJEgwKBHR5",
            "cGUYAiABKAkSDAoEY29kZRgDIAEoCRIKCgJpcBgEIAEoCRIMCgR0aW1lGAUg",
            "ASgJEgwKBGRhdGUYBiABKAkSDwoHbWVzc2FnZRgHIAEoCSKOBQoNcXVvdGF0",
            "aW9uX3JlcBITCgtleGNoYW5nZV9pZBgBIAEoCRIOCgZ0aWNrZXIYAiABKAkS",
            "DAoEY29kZRgDIAEoCRISCgpsYXN0X3ByaWNlGAQgASgBEhcKD3ByZV9jbG9z",
            "ZV9wcmljZRgFIAEoARIMCgRvcGVuGAYgASgBEgwKBGhpZ2gYByABKAESCwoD",
            "bG93GAggASgBEg0KBWNsb3NlGAkgASgBEhMKC2Nsb3NlX3ByaWNlGAogASgB",
            "EhkKEXByZV9vcGVuX2ludGVyZXN0GAsgASgBEhUKDW9wZW5faW50ZXJlc3QY",
            "DCABKAESHAoUcHJlX3NldHRsZW1lbnRfcHJpY2UYDSABKAESGAoQc2V0dGxl",
            "bWVudF9wcmljZRgOIAEoARIZChF1cHBlcl9saW1pdF9wcmljZRgPIAEoARIZ",
            "ChFsb3dlcl9saW1pdF9wcmljZRgQIAEoARIRCglwcmVfZGVsdGEYESABKAES",
            "EgoKY3Vycl9kZWx0YRgSIAEoARIRCglkYXRhX3RpbWUYEyABKBISEAoIZGF0",
            "ZXRpbWUYFCABKAkSCwoDcXR5GBUgASgSEg4KBnZvbHVtZRgWIAEoAhILCgN2",
            "b2wYFyABKAISEAoIdHVybm92ZXIYGCABKAESEQoJYXZnX3ByaWNlGBkgASgB",
            "EgwKBGlvcHYYGiABKAESFQoNZXRmX2J1eV9jb3VudBgbIAEoERIWCg5ldGZf",
            "c2VsbF9jb3VudBgcIAEoERITCgtldGZfYnV5X3F0eRgdIAEoARIVCg1ldGZf",
            "YnV5X21vbmV5GB4gASgBEhQKDGV0Zl9zZWxsX3F0eRgfIAEoARIWCg5ldGZf",
            "c2VsbF9tb25leRggIAEoATLfAgoTUVJfUXVvdGF0aW9uU2VydmljZRJqChBR",
            "Ul9xdW90YXRpb25fcDJwEiouUVVBTlRBWElTX1J1bnRpbWVfUXVvdGF0aW9u",
            "LnF1b3RhdGlvbl9yZXEaKi5RVUFOVEFYSVNfUnVudGltZV9RdW90YXRpb24u",
            "cXVvdGF0aW9uX3JlcBJsChBRQV9xdW90YXRpb25fcDJzEiouUVVBTlRBWElT",
            "X1J1bnRpbWVfUXVvdGF0aW9uLnF1b3RhdGlvbl9yZXEaKi5RVUFOVEFYSVNf",
            "UnVudGltZV9RdW90YXRpb24ucXVvdGF0aW9uX3JlcDABEm4KEFFBX3F1b3Rh",
            "dGlvbl9zMnMSKi5RVUFOVEFYSVNfUnVudGltZV9RdW90YXRpb24ucXVvdGF0",
            "aW9uX3JlcRoqLlFVQU5UQVhJU19SdW50aW1lX1F1b3RhdGlvbi5xdW90YXRp",
            "b25fcmVwKAEwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeQuotation.quotation_req), global::QUANTAXISRuntimeQuotation.quotation_req.Parser, new[]{ "ExchangeId", "Type", "Code", "Ip", "Time", "Date", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeQuotation.quotation_rep), global::QUANTAXISRuntimeQuotation.quotation_rep.Parser, new[]{ "ExchangeId", "Ticker", "Code", "LastPrice", "PreClosePrice", "Open", "High", "Low", "Close", "ClosePrice", "PreOpenInterest", "OpenInterest", "PreSettlementPrice", "SettlementPrice", "UpperLimitPrice", "LowerLimitPrice", "PreDelta", "CurrDelta", "DataTime", "Datetime", "Qty", "Volume", "Vol", "Turnover", "AvgPrice", "Iopv", "EtfBuyCount", "EtfSellCount", "EtfBuyQty", "EtfBuyMoney", "EtfSellQty", "EtfSellMoney" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class quotation_req : pb::IMessage<quotation_req> {
    private static readonly pb::MessageParser<quotation_req> _parser = new pb::MessageParser<quotation_req>(() => new quotation_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<quotation_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QUANTAXISRuntimeQuotation.QuotationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req(quotation_req other) : this() {
      exchangeId_ = other.exchangeId_;
      type_ = other.type_;
      code_ = other.code_;
      ip_ = other.ip_;
      time_ = other.time_;
      date_ = other.date_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req Clone() {
      return new quotation_req(this);
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 1;
    private string exchangeId_ = "";
    /// <summary>
    /// sz/sh/etf/index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    ///min/day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    /// <summary>
    ///code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    private string ip_ = "";
    /// <summary>
    ///tdx ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 6;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as quotation_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(quotation_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExchangeId != other.ExchangeId) return false;
      if (Type != other.Type) return false;
      if (Code != other.Code) return false;
      if (Ip != other.Ip) return false;
      if (Time != other.Time) return false;
      if (Date != other.Date) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExchangeId.Length != 0) hash ^= ExchangeId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExchangeId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Time);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Date);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExchangeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(quotation_req other) {
      if (other == null) {
        return;
      }
      if (other.ExchangeId.Length != 0) {
        ExchangeId = other.ExchangeId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExchangeId = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Time = input.ReadString();
            break;
          }
          case 50: {
            Date = input.ReadString();
            break;
          }
          case 58: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class quotation_rep : pb::IMessage<quotation_rep> {
    private static readonly pb::MessageParser<quotation_rep> _parser = new pb::MessageParser<quotation_rep>(() => new quotation_rep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<quotation_rep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QUANTAXISRuntimeQuotation.QuotationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep(quotation_rep other) : this() {
      exchangeId_ = other.exchangeId_;
      ticker_ = other.ticker_;
      code_ = other.code_;
      lastPrice_ = other.lastPrice_;
      preClosePrice_ = other.preClosePrice_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      closePrice_ = other.closePrice_;
      preOpenInterest_ = other.preOpenInterest_;
      openInterest_ = other.openInterest_;
      preSettlementPrice_ = other.preSettlementPrice_;
      settlementPrice_ = other.settlementPrice_;
      upperLimitPrice_ = other.upperLimitPrice_;
      lowerLimitPrice_ = other.lowerLimitPrice_;
      preDelta_ = other.preDelta_;
      currDelta_ = other.currDelta_;
      dataTime_ = other.dataTime_;
      datetime_ = other.datetime_;
      qty_ = other.qty_;
      volume_ = other.volume_;
      vol_ = other.vol_;
      turnover_ = other.turnover_;
      avgPrice_ = other.avgPrice_;
      iopv_ = other.iopv_;
      etfBuyCount_ = other.etfBuyCount_;
      etfSellCount_ = other.etfSellCount_;
      etfBuyQty_ = other.etfBuyQty_;
      etfBuyMoney_ = other.etfBuyMoney_;
      etfSellQty_ = other.etfSellQty_;
      etfSellMoney_ = other.etfSellMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep Clone() {
      return new quotation_rep(this);
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 1;
    private string exchangeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_price" field.</summary>
    public const int LastPriceFieldNumber = 4;
    private double lastPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    /// <summary>Field number for the "pre_close_price" field.</summary>
    public const int PreClosePriceFieldNumber = 5;
    private double preClosePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreClosePrice {
      get { return preClosePrice_; }
      set {
        preClosePrice_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 6;
    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 7;
    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 8;
    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 9;
    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "close_price" field.</summary>
    public const int ClosePriceFieldNumber = 10;
    private double closePrice_;
    /// <summary>
    ///今收盘
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "pre_open_interest" field.</summary>
    public const int PreOpenInterestFieldNumber = 11;
    private double preOpenInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreOpenInterest {
      get { return preOpenInterest_; }
      set {
        preOpenInterest_ = value;
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 12;
    private double openInterest_;
    /// <summary>
    ///持仓量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "pre_settlement_price" field.</summary>
    public const int PreSettlementPriceFieldNumber = 13;
    private double preSettlementPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreSettlementPrice {
      get { return preSettlementPrice_; }
      set {
        preSettlementPrice_ = value;
      }
    }

    /// <summary>Field number for the "settlement_price" field.</summary>
    public const int SettlementPriceFieldNumber = 14;
    private double settlementPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SettlementPrice {
      get { return settlementPrice_; }
      set {
        settlementPrice_ = value;
      }
    }

    /// <summary>Field number for the "upper_limit_price" field.</summary>
    public const int UpperLimitPriceFieldNumber = 15;
    private double upperLimitPrice_;
    /// <summary>
    ///涨停板价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpperLimitPrice {
      get { return upperLimitPrice_; }
      set {
        upperLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "lower_limit_price" field.</summary>
    public const int LowerLimitPriceFieldNumber = 16;
    private double lowerLimitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowerLimitPrice {
      get { return lowerLimitPrice_; }
      set {
        lowerLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "pre_delta" field.</summary>
    public const int PreDeltaFieldNumber = 17;
    private double preDelta_;
    /// <summary>
    ///昨虚实度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PreDelta {
      get { return preDelta_; }
      set {
        preDelta_ = value;
      }
    }

    /// <summary>Field number for the "curr_delta" field.</summary>
    public const int CurrDeltaFieldNumber = 18;
    private double currDelta_;
    /// <summary>
    ///今虚实度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrDelta {
      get { return currDelta_; }
      set {
        currDelta_ = value;
      }
    }

    /// <summary>Field number for the "data_time" field.</summary>
    public const int DataTimeFieldNumber = 19;
    private long dataTime_;
    /// <summary>
    ///YYYYMMDDHHMMSSsss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DataTime {
      get { return dataTime_; }
      set {
        dataTime_ = value;
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 20;
    private string datetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Datetime {
      get { return datetime_; }
      set {
        datetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 21;
    private long qty_;
    /// <summary>
    ///总成交量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 22;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "vol" field.</summary>
    public const int VolFieldNumber = 23;
    private float vol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vol {
      get { return vol_; }
      set {
        vol_ = value;
      }
    }

    /// <summary>Field number for the "turnover" field.</summary>
    public const int TurnoverFieldNumber = 24;
    private double turnover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Turnover {
      get { return turnover_; }
      set {
        turnover_ = value;
      }
    }

    /// <summary>Field number for the "avg_price" field.</summary>
    public const int AvgPriceFieldNumber = 25;
    private double avgPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgPrice {
      get { return avgPrice_; }
      set {
        avgPrice_ = value;
      }
    }

    /// <summary>Field number for the "iopv" field.</summary>
    public const int IopvFieldNumber = 26;
    private double iopv_;
    /// <summary>
    ///ETF净值估值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Iopv {
      get { return iopv_; }
      set {
        iopv_ = value;
      }
    }

    /// <summary>Field number for the "etf_buy_count" field.</summary>
    public const int EtfBuyCountFieldNumber = 27;
    private int etfBuyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EtfBuyCount {
      get { return etfBuyCount_; }
      set {
        etfBuyCount_ = value;
      }
    }

    /// <summary>Field number for the "etf_sell_count" field.</summary>
    public const int EtfSellCountFieldNumber = 28;
    private int etfSellCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EtfSellCount {
      get { return etfSellCount_; }
      set {
        etfSellCount_ = value;
      }
    }

    /// <summary>Field number for the "etf_buy_qty" field.</summary>
    public const int EtfBuyQtyFieldNumber = 29;
    private double etfBuyQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EtfBuyQty {
      get { return etfBuyQty_; }
      set {
        etfBuyQty_ = value;
      }
    }

    /// <summary>Field number for the "etf_buy_money" field.</summary>
    public const int EtfBuyMoneyFieldNumber = 30;
    private double etfBuyMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EtfBuyMoney {
      get { return etfBuyMoney_; }
      set {
        etfBuyMoney_ = value;
      }
    }

    /// <summary>Field number for the "etf_sell_qty" field.</summary>
    public const int EtfSellQtyFieldNumber = 31;
    private double etfSellQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EtfSellQty {
      get { return etfSellQty_; }
      set {
        etfSellQty_ = value;
      }
    }

    /// <summary>Field number for the "etf_sell_money" field.</summary>
    public const int EtfSellMoneyFieldNumber = 32;
    private double etfSellMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EtfSellMoney {
      get { return etfSellMoney_; }
      set {
        etfSellMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as quotation_rep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(quotation_rep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExchangeId != other.ExchangeId) return false;
      if (Ticker != other.Ticker) return false;
      if (Code != other.Code) return false;
      if (LastPrice != other.LastPrice) return false;
      if (PreClosePrice != other.PreClosePrice) return false;
      if (Open != other.Open) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Close != other.Close) return false;
      if (ClosePrice != other.ClosePrice) return false;
      if (PreOpenInterest != other.PreOpenInterest) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (PreSettlementPrice != other.PreSettlementPrice) return false;
      if (SettlementPrice != other.SettlementPrice) return false;
      if (UpperLimitPrice != other.UpperLimitPrice) return false;
      if (LowerLimitPrice != other.LowerLimitPrice) return false;
      if (PreDelta != other.PreDelta) return false;
      if (CurrDelta != other.CurrDelta) return false;
      if (DataTime != other.DataTime) return false;
      if (Datetime != other.Datetime) return false;
      if (Qty != other.Qty) return false;
      if (Volume != other.Volume) return false;
      if (Vol != other.Vol) return false;
      if (Turnover != other.Turnover) return false;
      if (AvgPrice != other.AvgPrice) return false;
      if (Iopv != other.Iopv) return false;
      if (EtfBuyCount != other.EtfBuyCount) return false;
      if (EtfSellCount != other.EtfSellCount) return false;
      if (EtfBuyQty != other.EtfBuyQty) return false;
      if (EtfBuyMoney != other.EtfBuyMoney) return false;
      if (EtfSellQty != other.EtfSellQty) return false;
      if (EtfSellMoney != other.EtfSellMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExchangeId.Length != 0) hash ^= ExchangeId.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (LastPrice != 0D) hash ^= LastPrice.GetHashCode();
      if (PreClosePrice != 0D) hash ^= PreClosePrice.GetHashCode();
      if (Open != 0D) hash ^= Open.GetHashCode();
      if (High != 0D) hash ^= High.GetHashCode();
      if (Low != 0D) hash ^= Low.GetHashCode();
      if (Close != 0D) hash ^= Close.GetHashCode();
      if (ClosePrice != 0D) hash ^= ClosePrice.GetHashCode();
      if (PreOpenInterest != 0D) hash ^= PreOpenInterest.GetHashCode();
      if (OpenInterest != 0D) hash ^= OpenInterest.GetHashCode();
      if (PreSettlementPrice != 0D) hash ^= PreSettlementPrice.GetHashCode();
      if (SettlementPrice != 0D) hash ^= SettlementPrice.GetHashCode();
      if (UpperLimitPrice != 0D) hash ^= UpperLimitPrice.GetHashCode();
      if (LowerLimitPrice != 0D) hash ^= LowerLimitPrice.GetHashCode();
      if (PreDelta != 0D) hash ^= PreDelta.GetHashCode();
      if (CurrDelta != 0D) hash ^= CurrDelta.GetHashCode();
      if (DataTime != 0L) hash ^= DataTime.GetHashCode();
      if (Datetime.Length != 0) hash ^= Datetime.GetHashCode();
      if (Qty != 0L) hash ^= Qty.GetHashCode();
      if (Volume != 0F) hash ^= Volume.GetHashCode();
      if (Vol != 0F) hash ^= Vol.GetHashCode();
      if (Turnover != 0D) hash ^= Turnover.GetHashCode();
      if (AvgPrice != 0D) hash ^= AvgPrice.GetHashCode();
      if (Iopv != 0D) hash ^= Iopv.GetHashCode();
      if (EtfBuyCount != 0) hash ^= EtfBuyCount.GetHashCode();
      if (EtfSellCount != 0) hash ^= EtfSellCount.GetHashCode();
      if (EtfBuyQty != 0D) hash ^= EtfBuyQty.GetHashCode();
      if (EtfBuyMoney != 0D) hash ^= EtfBuyMoney.GetHashCode();
      if (EtfSellQty != 0D) hash ^= EtfSellQty.GetHashCode();
      if (EtfSellMoney != 0D) hash ^= EtfSellMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExchangeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExchangeId);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (LastPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LastPrice);
      }
      if (PreClosePrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PreClosePrice);
      }
      if (Open != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Open);
      }
      if (High != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(High);
      }
      if (Low != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Low);
      }
      if (Close != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Close);
      }
      if (ClosePrice != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ClosePrice);
      }
      if (PreOpenInterest != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(PreOpenInterest);
      }
      if (OpenInterest != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(OpenInterest);
      }
      if (PreSettlementPrice != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(PreSettlementPrice);
      }
      if (SettlementPrice != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(SettlementPrice);
      }
      if (UpperLimitPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(UpperLimitPrice);
      }
      if (LowerLimitPrice != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(LowerLimitPrice);
      }
      if (PreDelta != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(PreDelta);
      }
      if (CurrDelta != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(CurrDelta);
      }
      if (DataTime != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteSInt64(DataTime);
      }
      if (Datetime.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Datetime);
      }
      if (Qty != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteSInt64(Qty);
      }
      if (Volume != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Volume);
      }
      if (Vol != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Vol);
      }
      if (Turnover != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(Turnover);
      }
      if (AvgPrice != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(AvgPrice);
      }
      if (Iopv != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(Iopv);
      }
      if (EtfBuyCount != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(EtfBuyCount);
      }
      if (EtfSellCount != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(EtfSellCount);
      }
      if (EtfBuyQty != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(EtfBuyQty);
      }
      if (EtfBuyMoney != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(EtfBuyMoney);
      }
      if (EtfSellQty != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(EtfSellQty);
      }
      if (EtfSellMoney != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(EtfSellMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExchangeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeId);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (LastPrice != 0D) {
        size += 1 + 8;
      }
      if (PreClosePrice != 0D) {
        size += 1 + 8;
      }
      if (Open != 0D) {
        size += 1 + 8;
      }
      if (High != 0D) {
        size += 1 + 8;
      }
      if (Low != 0D) {
        size += 1 + 8;
      }
      if (Close != 0D) {
        size += 1 + 8;
      }
      if (ClosePrice != 0D) {
        size += 1 + 8;
      }
      if (PreOpenInterest != 0D) {
        size += 1 + 8;
      }
      if (OpenInterest != 0D) {
        size += 1 + 8;
      }
      if (PreSettlementPrice != 0D) {
        size += 1 + 8;
      }
      if (SettlementPrice != 0D) {
        size += 1 + 8;
      }
      if (UpperLimitPrice != 0D) {
        size += 1 + 8;
      }
      if (LowerLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (PreDelta != 0D) {
        size += 2 + 8;
      }
      if (CurrDelta != 0D) {
        size += 2 + 8;
      }
      if (DataTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(DataTime);
      }
      if (Datetime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Datetime);
      }
      if (Qty != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Qty);
      }
      if (Volume != 0F) {
        size += 2 + 4;
      }
      if (Vol != 0F) {
        size += 2 + 4;
      }
      if (Turnover != 0D) {
        size += 2 + 8;
      }
      if (AvgPrice != 0D) {
        size += 2 + 8;
      }
      if (Iopv != 0D) {
        size += 2 + 8;
      }
      if (EtfBuyCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(EtfBuyCount);
      }
      if (EtfSellCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(EtfSellCount);
      }
      if (EtfBuyQty != 0D) {
        size += 2 + 8;
      }
      if (EtfBuyMoney != 0D) {
        size += 2 + 8;
      }
      if (EtfSellQty != 0D) {
        size += 2 + 8;
      }
      if (EtfSellMoney != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(quotation_rep other) {
      if (other == null) {
        return;
      }
      if (other.ExchangeId.Length != 0) {
        ExchangeId = other.ExchangeId;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.LastPrice != 0D) {
        LastPrice = other.LastPrice;
      }
      if (other.PreClosePrice != 0D) {
        PreClosePrice = other.PreClosePrice;
      }
      if (other.Open != 0D) {
        Open = other.Open;
      }
      if (other.High != 0D) {
        High = other.High;
      }
      if (other.Low != 0D) {
        Low = other.Low;
      }
      if (other.Close != 0D) {
        Close = other.Close;
      }
      if (other.ClosePrice != 0D) {
        ClosePrice = other.ClosePrice;
      }
      if (other.PreOpenInterest != 0D) {
        PreOpenInterest = other.PreOpenInterest;
      }
      if (other.OpenInterest != 0D) {
        OpenInterest = other.OpenInterest;
      }
      if (other.PreSettlementPrice != 0D) {
        PreSettlementPrice = other.PreSettlementPrice;
      }
      if (other.SettlementPrice != 0D) {
        SettlementPrice = other.SettlementPrice;
      }
      if (other.UpperLimitPrice != 0D) {
        UpperLimitPrice = other.UpperLimitPrice;
      }
      if (other.LowerLimitPrice != 0D) {
        LowerLimitPrice = other.LowerLimitPrice;
      }
      if (other.PreDelta != 0D) {
        PreDelta = other.PreDelta;
      }
      if (other.CurrDelta != 0D) {
        CurrDelta = other.CurrDelta;
      }
      if (other.DataTime != 0L) {
        DataTime = other.DataTime;
      }
      if (other.Datetime.Length != 0) {
        Datetime = other.Datetime;
      }
      if (other.Qty != 0L) {
        Qty = other.Qty;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.Vol != 0F) {
        Vol = other.Vol;
      }
      if (other.Turnover != 0D) {
        Turnover = other.Turnover;
      }
      if (other.AvgPrice != 0D) {
        AvgPrice = other.AvgPrice;
      }
      if (other.Iopv != 0D) {
        Iopv = other.Iopv;
      }
      if (other.EtfBuyCount != 0) {
        EtfBuyCount = other.EtfBuyCount;
      }
      if (other.EtfSellCount != 0) {
        EtfSellCount = other.EtfSellCount;
      }
      if (other.EtfBuyQty != 0D) {
        EtfBuyQty = other.EtfBuyQty;
      }
      if (other.EtfBuyMoney != 0D) {
        EtfBuyMoney = other.EtfBuyMoney;
      }
      if (other.EtfSellQty != 0D) {
        EtfSellQty = other.EtfSellQty;
      }
      if (other.EtfSellMoney != 0D) {
        EtfSellMoney = other.EtfSellMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ExchangeId = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 33: {
            LastPrice = input.ReadDouble();
            break;
          }
          case 41: {
            PreClosePrice = input.ReadDouble();
            break;
          }
          case 49: {
            Open = input.ReadDouble();
            break;
          }
          case 57: {
            High = input.ReadDouble();
            break;
          }
          case 65: {
            Low = input.ReadDouble();
            break;
          }
          case 73: {
            Close = input.ReadDouble();
            break;
          }
          case 81: {
            ClosePrice = input.ReadDouble();
            break;
          }
          case 89: {
            PreOpenInterest = input.ReadDouble();
            break;
          }
          case 97: {
            OpenInterest = input.ReadDouble();
            break;
          }
          case 105: {
            PreSettlementPrice = input.ReadDouble();
            break;
          }
          case 113: {
            SettlementPrice = input.ReadDouble();
            break;
          }
          case 121: {
            UpperLimitPrice = input.ReadDouble();
            break;
          }
          case 129: {
            LowerLimitPrice = input.ReadDouble();
            break;
          }
          case 137: {
            PreDelta = input.ReadDouble();
            break;
          }
          case 145: {
            CurrDelta = input.ReadDouble();
            break;
          }
          case 152: {
            DataTime = input.ReadSInt64();
            break;
          }
          case 162: {
            Datetime = input.ReadString();
            break;
          }
          case 168: {
            Qty = input.ReadSInt64();
            break;
          }
          case 181: {
            Volume = input.ReadFloat();
            break;
          }
          case 189: {
            Vol = input.ReadFloat();
            break;
          }
          case 193: {
            Turnover = input.ReadDouble();
            break;
          }
          case 201: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 209: {
            Iopv = input.ReadDouble();
            break;
          }
          case 216: {
            EtfBuyCount = input.ReadSInt32();
            break;
          }
          case 224: {
            EtfSellCount = input.ReadSInt32();
            break;
          }
          case 233: {
            EtfBuyQty = input.ReadDouble();
            break;
          }
          case 241: {
            EtfBuyMoney = input.ReadDouble();
            break;
          }
          case 249: {
            EtfSellQty = input.ReadDouble();
            break;
          }
          case 257: {
            EtfSellMoney = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
