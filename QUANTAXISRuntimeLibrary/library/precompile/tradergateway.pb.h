// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradergateway.proto

#ifndef PROTOBUF_tradergateway_2eproto__INCLUDED
#define PROTOBUF_tradergateway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace QUANTAXIS_Runtime_Tradergateway {
class tradergateway_req;
class tradergateway_reqDefaultTypeInternal;
extern tradergateway_reqDefaultTypeInternal _tradergateway_req_default_instance_;
class tradergateway_req_gateway_status;
class tradergateway_req_gateway_statusDefaultTypeInternal;
extern tradergateway_req_gateway_statusDefaultTypeInternal _tradergateway_req_gateway_status_default_instance_;
class tradergateway_req_order;
class tradergateway_req_orderDefaultTypeInternal;
extern tradergateway_req_orderDefaultTypeInternal _tradergateway_req_order_default_instance_;
class tradergateway_req_trader;
class tradergateway_req_traderDefaultTypeInternal;
extern tradergateway_req_traderDefaultTypeInternal _tradergateway_req_trader_default_instance_;
}  // namespace QUANTAXIS_Runtime_Tradergateway

namespace QUANTAXIS_Runtime_Tradergateway {

namespace protobuf_tradergateway_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tradergateway_2eproto

// ===================================================================

class tradergateway_req_trader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader) */ {
 public:
  tradergateway_req_trader();
  virtual ~tradergateway_req_trader();

  tradergateway_req_trader(const tradergateway_req_trader& from);

  inline tradergateway_req_trader& operator=(const tradergateway_req_trader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tradergateway_req_trader(tradergateway_req_trader&& from) noexcept
    : tradergateway_req_trader() {
    *this = ::std::move(from);
  }

  inline tradergateway_req_trader& operator=(tradergateway_req_trader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tradergateway_req_trader& default_instance();

  static inline const tradergateway_req_trader* internal_default_instance() {
    return reinterpret_cast<const tradergateway_req_trader*>(
               &_tradergateway_req_trader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(tradergateway_req_trader* other);
  friend void swap(tradergateway_req_trader& a, tradergateway_req_trader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tradergateway_req_trader* New() const PROTOBUF_FINAL { return New(NULL); }

  tradergateway_req_trader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tradergateway_req_trader& from);
  void MergeFrom(const tradergateway_req_trader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tradergateway_req_trader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trader_broker = 1;
  void clear_trader_broker();
  static const int kTraderBrokerFieldNumber = 1;
  const ::std::string& trader_broker() const;
  void set_trader_broker(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_broker(::std::string&& value);
  #endif
  void set_trader_broker(const char* value);
  void set_trader_broker(const char* value, size_t size);
  ::std::string* mutable_trader_broker();
  ::std::string* release_trader_broker();
  void set_allocated_trader_broker(::std::string* trader_broker);

  // string trader_user = 2;
  void clear_trader_user();
  static const int kTraderUserFieldNumber = 2;
  const ::std::string& trader_user() const;
  void set_trader_user(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_user(::std::string&& value);
  #endif
  void set_trader_user(const char* value);
  void set_trader_user(const char* value, size_t size);
  ::std::string* mutable_trader_user();
  ::std::string* release_trader_user();
  void set_allocated_trader_user(::std::string* trader_user);

  // string trader_password = 3;
  void clear_trader_password();
  static const int kTraderPasswordFieldNumber = 3;
  const ::std::string& trader_password() const;
  void set_trader_password(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_password(::std::string&& value);
  #endif
  void set_trader_password(const char* value);
  void set_trader_password(const char* value, size_t size);
  ::std::string* mutable_trader_password();
  ::std::string* release_trader_password();
  void set_allocated_trader_password(::std::string* trader_password);

  // string trader_token = 4;
  void clear_trader_token();
  static const int kTraderTokenFieldNumber = 4;
  const ::std::string& trader_token() const;
  void set_trader_token(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_token(::std::string&& value);
  #endif
  void set_trader_token(const char* value);
  void set_trader_token(const char* value, size_t size);
  ::std::string* mutable_trader_token();
  ::std::string* release_trader_token();
  void set_allocated_trader_token(::std::string* trader_token);

  // string trader_session = 5;
  void clear_trader_session();
  static const int kTraderSessionFieldNumber = 5;
  const ::std::string& trader_session() const;
  void set_trader_session(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_session(::std::string&& value);
  #endif
  void set_trader_session(const char* value);
  void set_trader_session(const char* value, size_t size);
  ::std::string* mutable_trader_session();
  ::std::string* release_trader_session();
  void set_allocated_trader_session(::std::string* trader_session);

  // string trader_ip = 6;
  void clear_trader_ip();
  static const int kTraderIpFieldNumber = 6;
  const ::std::string& trader_ip() const;
  void set_trader_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_ip(::std::string&& value);
  #endif
  void set_trader_ip(const char* value);
  void set_trader_ip(const char* value, size_t size);
  ::std::string* mutable_trader_ip();
  ::std::string* release_trader_ip();
  void set_allocated_trader_ip(::std::string* trader_ip);

  // string trader_port = 7;
  void clear_trader_port();
  static const int kTraderPortFieldNumber = 7;
  const ::std::string& trader_port() const;
  void set_trader_port(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_port(::std::string&& value);
  #endif
  void set_trader_port(const char* value);
  void set_trader_port(const char* value, size_t size);
  ::std::string* mutable_trader_port();
  ::std::string* release_trader_port();
  void set_allocated_trader_port(::std::string* trader_port);

  // string trader_clientversion = 8;
  void clear_trader_clientversion();
  static const int kTraderClientversionFieldNumber = 8;
  const ::std::string& trader_clientversion() const;
  void set_trader_clientversion(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_clientversion(::std::string&& value);
  #endif
  void set_trader_clientversion(const char* value);
  void set_trader_clientversion(const char* value, size_t size);
  ::std::string* mutable_trader_clientversion();
  ::std::string* release_trader_clientversion();
  void set_allocated_trader_clientversion(::std::string* trader_clientversion);

  // string trader_ret = 9;
  void clear_trader_ret();
  static const int kTraderRetFieldNumber = 9;
  const ::std::string& trader_ret() const;
  void set_trader_ret(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_ret(::std::string&& value);
  #endif
  void set_trader_ret(const char* value);
  void set_trader_ret(const char* value, size_t size);
  ::std::string* mutable_trader_ret();
  ::std::string* release_trader_ret();
  void set_allocated_trader_ret(::std::string* trader_ret);

  // string trader_error_context = 10;
  void clear_trader_error_context();
  static const int kTraderErrorContextFieldNumber = 10;
  const ::std::string& trader_error_context() const;
  void set_trader_error_context(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_error_context(::std::string&& value);
  #endif
  void set_trader_error_context(const char* value);
  void set_trader_error_context(const char* value, size_t size);
  ::std::string* mutable_trader_error_context();
  ::std::string* release_trader_error_context();
  void set_allocated_trader_error_context(::std::string* trader_error_context);

  // string trader_error_id = 11;
  void clear_trader_error_id();
  static const int kTraderErrorIdFieldNumber = 11;
  const ::std::string& trader_error_id() const;
  void set_trader_error_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_error_id(::std::string&& value);
  #endif
  void set_trader_error_id(const char* value);
  void set_trader_error_id(const char* value, size_t size);
  ::std::string* mutable_trader_error_id();
  ::std::string* release_trader_error_id();
  void set_allocated_trader_error_id(::std::string* trader_error_id);

  // string trader_dep_id = 12;
  void clear_trader_dep_id();
  static const int kTraderDepIdFieldNumber = 12;
  const ::std::string& trader_dep_id() const;
  void set_trader_dep_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_dep_id(::std::string&& value);
  #endif
  void set_trader_dep_id(const char* value);
  void set_trader_dep_id(const char* value, size_t size);
  ::std::string* mutable_trader_dep_id();
  ::std::string* release_trader_dep_id();
  void set_allocated_trader_dep_id(::std::string* trader_dep_id);

  // string trader_credit_account = 13;
  void clear_trader_credit_account();
  static const int kTraderCreditAccountFieldNumber = 13;
  const ::std::string& trader_credit_account() const;
  void set_trader_credit_account(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_credit_account(::std::string&& value);
  #endif
  void set_trader_credit_account(const char* value);
  void set_trader_credit_account(const char* value, size_t size);
  ::std::string* mutable_trader_credit_account();
  ::std::string* release_trader_credit_account();
  void set_allocated_trader_credit_account(::std::string* trader_credit_account);

  // string trader_account_model = 14;
  void clear_trader_account_model();
  static const int kTraderAccountModelFieldNumber = 14;
  const ::std::string& trader_account_model() const;
  void set_trader_account_model(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_account_model(::std::string&& value);
  #endif
  void set_trader_account_model(const char* value);
  void set_trader_account_model(const char* value, size_t size);
  ::std::string* mutable_trader_account_model();
  ::std::string* release_trader_account_model();
  void set_allocated_trader_account_model(::std::string* trader_account_model);

  // string trader_time = 15;
  void clear_trader_time();
  static const int kTraderTimeFieldNumber = 15;
  const ::std::string& trader_time() const;
  void set_trader_time(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_time(::std::string&& value);
  #endif
  void set_trader_time(const char* value);
  void set_trader_time(const char* value, size_t size);
  ::std::string* mutable_trader_time();
  ::std::string* release_trader_time();
  void set_allocated_trader_time(::std::string* trader_time);

  // string trader_heartbeat = 16;
  void clear_trader_heartbeat();
  static const int kTraderHeartbeatFieldNumber = 16;
  const ::std::string& trader_heartbeat() const;
  void set_trader_heartbeat(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_heartbeat(::std::string&& value);
  #endif
  void set_trader_heartbeat(const char* value);
  void set_trader_heartbeat(const char* value, size_t size);
  ::std::string* mutable_trader_heartbeat();
  ::std::string* release_trader_heartbeat();
  void set_allocated_trader_heartbeat(::std::string* trader_heartbeat);

  // string trader_encrymethod = 17;
  void clear_trader_encrymethod();
  static const int kTraderEncrymethodFieldNumber = 17;
  const ::std::string& trader_encrymethod() const;
  void set_trader_encrymethod(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_encrymethod(::std::string&& value);
  #endif
  void set_trader_encrymethod(const char* value);
  void set_trader_encrymethod(const char* value, size_t size);
  ::std::string* mutable_trader_encrymethod();
  ::std::string* release_trader_encrymethod();
  void set_allocated_trader_encrymethod(::std::string* trader_encrymethod);

  // string trader_rawdatalength = 18;
  void clear_trader_rawdatalength();
  static const int kTraderRawdatalengthFieldNumber = 18;
  const ::std::string& trader_rawdatalength() const;
  void set_trader_rawdatalength(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_rawdatalength(::std::string&& value);
  #endif
  void set_trader_rawdatalength(const char* value);
  void set_trader_rawdatalength(const char* value, size_t size);
  ::std::string* mutable_trader_rawdatalength();
  ::std::string* release_trader_rawdatalength();
  void set_allocated_trader_rawdatalength(::std::string* trader_rawdatalength);

  // string trader_rejectmessage = 19;
  void clear_trader_rejectmessage();
  static const int kTraderRejectmessageFieldNumber = 19;
  const ::std::string& trader_rejectmessage() const;
  void set_trader_rejectmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_rejectmessage(::std::string&& value);
  #endif
  void set_trader_rejectmessage(const char* value);
  void set_trader_rejectmessage(const char* value, size_t size);
  ::std::string* mutable_trader_rejectmessage();
  ::std::string* release_trader_rejectmessage();
  void set_allocated_trader_rejectmessage(::std::string* trader_rejectmessage);

  // string trader_txpassword = 20;
  void clear_trader_txpassword();
  static const int kTraderTxpasswordFieldNumber = 20;
  const ::std::string& trader_txpassword() const;
  void set_trader_txpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_trader_txpassword(::std::string&& value);
  #endif
  void set_trader_txpassword(const char* value);
  void set_trader_txpassword(const char* value, size_t size);
  ::std::string* mutable_trader_txpassword();
  ::std::string* release_trader_txpassword();
  void set_allocated_trader_txpassword(::std::string* trader_txpassword);

  // @@protoc_insertion_point(class_scope:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trader_broker_;
  ::google::protobuf::internal::ArenaStringPtr trader_user_;
  ::google::protobuf::internal::ArenaStringPtr trader_password_;
  ::google::protobuf::internal::ArenaStringPtr trader_token_;
  ::google::protobuf::internal::ArenaStringPtr trader_session_;
  ::google::protobuf::internal::ArenaStringPtr trader_ip_;
  ::google::protobuf::internal::ArenaStringPtr trader_port_;
  ::google::protobuf::internal::ArenaStringPtr trader_clientversion_;
  ::google::protobuf::internal::ArenaStringPtr trader_ret_;
  ::google::protobuf::internal::ArenaStringPtr trader_error_context_;
  ::google::protobuf::internal::ArenaStringPtr trader_error_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_dep_id_;
  ::google::protobuf::internal::ArenaStringPtr trader_credit_account_;
  ::google::protobuf::internal::ArenaStringPtr trader_account_model_;
  ::google::protobuf::internal::ArenaStringPtr trader_time_;
  ::google::protobuf::internal::ArenaStringPtr trader_heartbeat_;
  ::google::protobuf::internal::ArenaStringPtr trader_encrymethod_;
  ::google::protobuf::internal::ArenaStringPtr trader_rawdatalength_;
  ::google::protobuf::internal::ArenaStringPtr trader_rejectmessage_;
  ::google::protobuf::internal::ArenaStringPtr trader_txpassword_;
  mutable int _cached_size_;
  friend struct protobuf_tradergateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tradergateway_req_gateway_status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status) */ {
 public:
  tradergateway_req_gateway_status();
  virtual ~tradergateway_req_gateway_status();

  tradergateway_req_gateway_status(const tradergateway_req_gateway_status& from);

  inline tradergateway_req_gateway_status& operator=(const tradergateway_req_gateway_status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tradergateway_req_gateway_status(tradergateway_req_gateway_status&& from) noexcept
    : tradergateway_req_gateway_status() {
    *this = ::std::move(from);
  }

  inline tradergateway_req_gateway_status& operator=(tradergateway_req_gateway_status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tradergateway_req_gateway_status& default_instance();

  static inline const tradergateway_req_gateway_status* internal_default_instance() {
    return reinterpret_cast<const tradergateway_req_gateway_status*>(
               &_tradergateway_req_gateway_status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(tradergateway_req_gateway_status* other);
  friend void swap(tradergateway_req_gateway_status& a, tradergateway_req_gateway_status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tradergateway_req_gateway_status* New() const PROTOBUF_FINAL { return New(NULL); }

  tradergateway_req_gateway_status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tradergateway_req_gateway_status& from);
  void MergeFrom(const tradergateway_req_gateway_status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tradergateway_req_gateway_status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gateway_islogin = 1;
  void clear_gateway_islogin();
  static const int kGatewayIsloginFieldNumber = 1;
  const ::std::string& gateway_islogin() const;
  void set_gateway_islogin(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_islogin(::std::string&& value);
  #endif
  void set_gateway_islogin(const char* value);
  void set_gateway_islogin(const char* value, size_t size);
  ::std::string* mutable_gateway_islogin();
  ::std::string* release_gateway_islogin();
  void set_allocated_gateway_islogin(::std::string* gateway_islogin);

  // string gateway_iserror = 2;
  void clear_gateway_iserror();
  static const int kGatewayIserrorFieldNumber = 2;
  const ::std::string& gateway_iserror() const;
  void set_gateway_iserror(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_iserror(::std::string&& value);
  #endif
  void set_gateway_iserror(const char* value);
  void set_gateway_iserror(const char* value, size_t size);
  ::std::string* mutable_gateway_iserror();
  ::std::string* release_gateway_iserror();
  void set_allocated_gateway_iserror(::std::string* gateway_iserror);

  // @@protoc_insertion_point(class_scope:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_islogin_;
  ::google::protobuf::internal::ArenaStringPtr gateway_iserror_;
  mutable int _cached_size_;
  friend struct protobuf_tradergateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tradergateway_req_order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order) */ {
 public:
  tradergateway_req_order();
  virtual ~tradergateway_req_order();

  tradergateway_req_order(const tradergateway_req_order& from);

  inline tradergateway_req_order& operator=(const tradergateway_req_order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tradergateway_req_order(tradergateway_req_order&& from) noexcept
    : tradergateway_req_order() {
    *this = ::std::move(from);
  }

  inline tradergateway_req_order& operator=(tradergateway_req_order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tradergateway_req_order& default_instance();

  static inline const tradergateway_req_order* internal_default_instance() {
    return reinterpret_cast<const tradergateway_req_order*>(
               &_tradergateway_req_order_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(tradergateway_req_order* other);
  friend void swap(tradergateway_req_order& a, tradergateway_req_order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tradergateway_req_order* New() const PROTOBUF_FINAL { return New(NULL); }

  tradergateway_req_order* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tradergateway_req_order& from);
  void MergeFrom(const tradergateway_req_order& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tradergateway_req_order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string order = 1;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  const ::std::string& order() const;
  void set_order(const ::std::string& value);
  #if LANG_CXX11
  void set_order(::std::string&& value);
  #endif
  void set_order(const char* value);
  void set_order(const char* value, size_t size);
  ::std::string* mutable_order();
  ::std::string* release_order();
  void set_allocated_order(::std::string* order);

  // @@protoc_insertion_point(class_scope:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr order_;
  mutable int _cached_size_;
  friend struct protobuf_tradergateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tradergateway_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QUANTAXIS_Runtime_Tradergateway.tradergateway_req) */ {
 public:
  tradergateway_req();
  virtual ~tradergateway_req();

  tradergateway_req(const tradergateway_req& from);

  inline tradergateway_req& operator=(const tradergateway_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tradergateway_req(tradergateway_req&& from) noexcept
    : tradergateway_req() {
    *this = ::std::move(from);
  }

  inline tradergateway_req& operator=(tradergateway_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tradergateway_req& default_instance();

  static inline const tradergateway_req* internal_default_instance() {
    return reinterpret_cast<const tradergateway_req*>(
               &_tradergateway_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(tradergateway_req* other);
  friend void swap(tradergateway_req& a, tradergateway_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tradergateway_req* New() const PROTOBUF_FINAL { return New(NULL); }

  tradergateway_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tradergateway_req& from);
  void MergeFrom(const tradergateway_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tradergateway_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef tradergateway_req_trader trader;
  typedef tradergateway_req_gateway_status gateway_status;
  typedef tradergateway_req_order order;

  // accessors -------------------------------------------------------

  // string gateway_broker = 1;
  void clear_gateway_broker();
  static const int kGatewayBrokerFieldNumber = 1;
  const ::std::string& gateway_broker() const;
  void set_gateway_broker(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_broker(::std::string&& value);
  #endif
  void set_gateway_broker(const char* value);
  void set_gateway_broker(const char* value, size_t size);
  ::std::string* mutable_gateway_broker();
  ::std::string* release_gateway_broker();
  void set_allocated_gateway_broker(::std::string* gateway_broker);

  // string gateway_user = 2;
  void clear_gateway_user();
  static const int kGatewayUserFieldNumber = 2;
  const ::std::string& gateway_user() const;
  void set_gateway_user(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_user(::std::string&& value);
  #endif
  void set_gateway_user(const char* value);
  void set_gateway_user(const char* value, size_t size);
  ::std::string* mutable_gateway_user();
  ::std::string* release_gateway_user();
  void set_allocated_gateway_user(::std::string* gateway_user);

  // string gateway_password = 3;
  void clear_gateway_password();
  static const int kGatewayPasswordFieldNumber = 3;
  const ::std::string& gateway_password() const;
  void set_gateway_password(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_password(::std::string&& value);
  #endif
  void set_gateway_password(const char* value);
  void set_gateway_password(const char* value, size_t size);
  ::std::string* mutable_gateway_password();
  ::std::string* release_gateway_password();
  void set_allocated_gateway_password(::std::string* gateway_password);

  // string gateway_token = 4;
  void clear_gateway_token();
  static const int kGatewayTokenFieldNumber = 4;
  const ::std::string& gateway_token() const;
  void set_gateway_token(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_token(::std::string&& value);
  #endif
  void set_gateway_token(const char* value);
  void set_gateway_token(const char* value, size_t size);
  ::std::string* mutable_gateway_token();
  ::std::string* release_gateway_token();
  void set_allocated_gateway_token(::std::string* gateway_token);

  // string gateway_session = 5;
  void clear_gateway_session();
  static const int kGatewaySessionFieldNumber = 5;
  const ::std::string& gateway_session() const;
  void set_gateway_session(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_session(::std::string&& value);
  #endif
  void set_gateway_session(const char* value);
  void set_gateway_session(const char* value, size_t size);
  ::std::string* mutable_gateway_session();
  ::std::string* release_gateway_session();
  void set_allocated_gateway_session(::std::string* gateway_session);

  // string gateway_message = 6;
  void clear_gateway_message();
  static const int kGatewayMessageFieldNumber = 6;
  const ::std::string& gateway_message() const;
  void set_gateway_message(const ::std::string& value);
  #if LANG_CXX11
  void set_gateway_message(::std::string&& value);
  #endif
  void set_gateway_message(const char* value);
  void set_gateway_message(const char* value, size_t size);
  ::std::string* mutable_gateway_message();
  ::std::string* release_gateway_message();
  void set_allocated_gateway_message(::std::string* gateway_message);

  // @@protoc_insertion_point(class_scope:QUANTAXIS_Runtime_Tradergateway.tradergateway_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gateway_broker_;
  ::google::protobuf::internal::ArenaStringPtr gateway_user_;
  ::google::protobuf::internal::ArenaStringPtr gateway_password_;
  ::google::protobuf::internal::ArenaStringPtr gateway_token_;
  ::google::protobuf::internal::ArenaStringPtr gateway_session_;
  ::google::protobuf::internal::ArenaStringPtr gateway_message_;
  mutable int _cached_size_;
  friend struct protobuf_tradergateway_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tradergateway_req_trader

// string trader_broker = 1;
inline void tradergateway_req_trader::clear_trader_broker() {
  trader_broker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_broker() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
  return trader_broker_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_broker(const ::std::string& value) {
  
  trader_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_broker(::std::string&& value) {
  
  trader_broker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
}
#endif
inline void tradergateway_req_trader::set_trader_broker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
}
inline void tradergateway_req_trader::set_trader_broker(const char* value, size_t size) {
  
  trader_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_broker() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
  return trader_broker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_broker() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
  
  return trader_broker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_broker(::std::string* trader_broker) {
  if (trader_broker != NULL) {
    
  } else {
    
  }
  trader_broker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_broker);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_broker)
}

// string trader_user = 2;
inline void tradergateway_req_trader::clear_trader_user() {
  trader_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_user() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
  return trader_user_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_user(const ::std::string& value) {
  
  trader_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_user(::std::string&& value) {
  
  trader_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
}
#endif
inline void tradergateway_req_trader::set_trader_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
}
inline void tradergateway_req_trader::set_trader_user(const char* value, size_t size) {
  
  trader_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_user() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
  return trader_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_user() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
  
  return trader_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_user(::std::string* trader_user) {
  if (trader_user != NULL) {
    
  } else {
    
  }
  trader_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_user);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_user)
}

// string trader_password = 3;
inline void tradergateway_req_trader::clear_trader_password() {
  trader_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_password() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
  return trader_password_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_password(const ::std::string& value) {
  
  trader_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_password(::std::string&& value) {
  
  trader_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
}
#endif
inline void tradergateway_req_trader::set_trader_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
}
inline void tradergateway_req_trader::set_trader_password(const char* value, size_t size) {
  
  trader_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_password() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
  return trader_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_password() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
  
  return trader_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_password(::std::string* trader_password) {
  if (trader_password != NULL) {
    
  } else {
    
  }
  trader_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_password);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_password)
}

// string trader_token = 4;
inline void tradergateway_req_trader::clear_trader_token() {
  trader_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_token() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
  return trader_token_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_token(const ::std::string& value) {
  
  trader_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_token(::std::string&& value) {
  
  trader_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
}
#endif
inline void tradergateway_req_trader::set_trader_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
}
inline void tradergateway_req_trader::set_trader_token(const char* value, size_t size) {
  
  trader_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_token() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
  return trader_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_token() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
  
  return trader_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_token(::std::string* trader_token) {
  if (trader_token != NULL) {
    
  } else {
    
  }
  trader_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_token);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_token)
}

// string trader_session = 5;
inline void tradergateway_req_trader::clear_trader_session() {
  trader_session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_session() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
  return trader_session_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_session(const ::std::string& value) {
  
  trader_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_session(::std::string&& value) {
  
  trader_session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
}
#endif
inline void tradergateway_req_trader::set_trader_session(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
}
inline void tradergateway_req_trader::set_trader_session(const char* value, size_t size) {
  
  trader_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_session() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
  return trader_session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_session() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
  
  return trader_session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_session(::std::string* trader_session) {
  if (trader_session != NULL) {
    
  } else {
    
  }
  trader_session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_session);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_session)
}

// string trader_ip = 6;
inline void tradergateway_req_trader::clear_trader_ip() {
  trader_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_ip() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
  return trader_ip_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_ip(const ::std::string& value) {
  
  trader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_ip(::std::string&& value) {
  
  trader_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
}
#endif
inline void tradergateway_req_trader::set_trader_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
}
inline void tradergateway_req_trader::set_trader_ip(const char* value, size_t size) {
  
  trader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_ip() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
  return trader_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_ip() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
  
  return trader_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_ip(::std::string* trader_ip) {
  if (trader_ip != NULL) {
    
  } else {
    
  }
  trader_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_ip);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ip)
}

// string trader_port = 7;
inline void tradergateway_req_trader::clear_trader_port() {
  trader_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_port() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
  return trader_port_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_port(const ::std::string& value) {
  
  trader_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_port(::std::string&& value) {
  
  trader_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
}
#endif
inline void tradergateway_req_trader::set_trader_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
}
inline void tradergateway_req_trader::set_trader_port(const char* value, size_t size) {
  
  trader_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_port() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
  return trader_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_port() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
  
  return trader_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_port(::std::string* trader_port) {
  if (trader_port != NULL) {
    
  } else {
    
  }
  trader_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_port);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_port)
}

// string trader_clientversion = 8;
inline void tradergateway_req_trader::clear_trader_clientversion() {
  trader_clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_clientversion() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
  return trader_clientversion_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_clientversion(const ::std::string& value) {
  
  trader_clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_clientversion(::std::string&& value) {
  
  trader_clientversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
}
#endif
inline void tradergateway_req_trader::set_trader_clientversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
}
inline void tradergateway_req_trader::set_trader_clientversion(const char* value, size_t size) {
  
  trader_clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_clientversion() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
  return trader_clientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_clientversion() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
  
  return trader_clientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_clientversion(::std::string* trader_clientversion) {
  if (trader_clientversion != NULL) {
    
  } else {
    
  }
  trader_clientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_clientversion);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_clientversion)
}

// string trader_ret = 9;
inline void tradergateway_req_trader::clear_trader_ret() {
  trader_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_ret() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
  return trader_ret_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_ret(const ::std::string& value) {
  
  trader_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_ret(::std::string&& value) {
  
  trader_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
}
#endif
inline void tradergateway_req_trader::set_trader_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
}
inline void tradergateway_req_trader::set_trader_ret(const char* value, size_t size) {
  
  trader_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_ret() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
  return trader_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_ret() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
  
  return trader_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_ret(::std::string* trader_ret) {
  if (trader_ret != NULL) {
    
  } else {
    
  }
  trader_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_ret);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_ret)
}

// string trader_error_context = 10;
inline void tradergateway_req_trader::clear_trader_error_context() {
  trader_error_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_error_context() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
  return trader_error_context_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_error_context(const ::std::string& value) {
  
  trader_error_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_error_context(::std::string&& value) {
  
  trader_error_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
}
#endif
inline void tradergateway_req_trader::set_trader_error_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_error_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
}
inline void tradergateway_req_trader::set_trader_error_context(const char* value, size_t size) {
  
  trader_error_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_error_context() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
  return trader_error_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_error_context() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
  
  return trader_error_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_error_context(::std::string* trader_error_context) {
  if (trader_error_context != NULL) {
    
  } else {
    
  }
  trader_error_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_error_context);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_context)
}

// string trader_error_id = 11;
inline void tradergateway_req_trader::clear_trader_error_id() {
  trader_error_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_error_id() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
  return trader_error_id_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_error_id(const ::std::string& value) {
  
  trader_error_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_error_id(::std::string&& value) {
  
  trader_error_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
}
#endif
inline void tradergateway_req_trader::set_trader_error_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_error_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
}
inline void tradergateway_req_trader::set_trader_error_id(const char* value, size_t size) {
  
  trader_error_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_error_id() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
  return trader_error_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_error_id() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
  
  return trader_error_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_error_id(::std::string* trader_error_id) {
  if (trader_error_id != NULL) {
    
  } else {
    
  }
  trader_error_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_error_id);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_error_id)
}

// string trader_dep_id = 12;
inline void tradergateway_req_trader::clear_trader_dep_id() {
  trader_dep_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_dep_id() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
  return trader_dep_id_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_dep_id(const ::std::string& value) {
  
  trader_dep_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_dep_id(::std::string&& value) {
  
  trader_dep_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
}
#endif
inline void tradergateway_req_trader::set_trader_dep_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_dep_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
}
inline void tradergateway_req_trader::set_trader_dep_id(const char* value, size_t size) {
  
  trader_dep_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_dep_id() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
  return trader_dep_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_dep_id() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
  
  return trader_dep_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_dep_id(::std::string* trader_dep_id) {
  if (trader_dep_id != NULL) {
    
  } else {
    
  }
  trader_dep_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_dep_id);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_dep_id)
}

// string trader_credit_account = 13;
inline void tradergateway_req_trader::clear_trader_credit_account() {
  trader_credit_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_credit_account() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
  return trader_credit_account_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_credit_account(const ::std::string& value) {
  
  trader_credit_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_credit_account(::std::string&& value) {
  
  trader_credit_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
}
#endif
inline void tradergateway_req_trader::set_trader_credit_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_credit_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
}
inline void tradergateway_req_trader::set_trader_credit_account(const char* value, size_t size) {
  
  trader_credit_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_credit_account() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
  return trader_credit_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_credit_account() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
  
  return trader_credit_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_credit_account(::std::string* trader_credit_account) {
  if (trader_credit_account != NULL) {
    
  } else {
    
  }
  trader_credit_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_credit_account);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_credit_account)
}

// string trader_account_model = 14;
inline void tradergateway_req_trader::clear_trader_account_model() {
  trader_account_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_account_model() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
  return trader_account_model_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_account_model(const ::std::string& value) {
  
  trader_account_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_account_model(::std::string&& value) {
  
  trader_account_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
}
#endif
inline void tradergateway_req_trader::set_trader_account_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_account_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
}
inline void tradergateway_req_trader::set_trader_account_model(const char* value, size_t size) {
  
  trader_account_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_account_model() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
  return trader_account_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_account_model() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
  
  return trader_account_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_account_model(::std::string* trader_account_model) {
  if (trader_account_model != NULL) {
    
  } else {
    
  }
  trader_account_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_account_model);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_account_model)
}

// string trader_time = 15;
inline void tradergateway_req_trader::clear_trader_time() {
  trader_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_time() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
  return trader_time_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_time(const ::std::string& value) {
  
  trader_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_time(::std::string&& value) {
  
  trader_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
}
#endif
inline void tradergateway_req_trader::set_trader_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
}
inline void tradergateway_req_trader::set_trader_time(const char* value, size_t size) {
  
  trader_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_time() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
  return trader_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_time() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
  
  return trader_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_time(::std::string* trader_time) {
  if (trader_time != NULL) {
    
  } else {
    
  }
  trader_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_time);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_time)
}

// string trader_heartbeat = 16;
inline void tradergateway_req_trader::clear_trader_heartbeat() {
  trader_heartbeat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_heartbeat() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
  return trader_heartbeat_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_heartbeat(const ::std::string& value) {
  
  trader_heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_heartbeat(::std::string&& value) {
  
  trader_heartbeat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
}
#endif
inline void tradergateway_req_trader::set_trader_heartbeat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
}
inline void tradergateway_req_trader::set_trader_heartbeat(const char* value, size_t size) {
  
  trader_heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_heartbeat() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
  return trader_heartbeat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_heartbeat() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
  
  return trader_heartbeat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_heartbeat(::std::string* trader_heartbeat) {
  if (trader_heartbeat != NULL) {
    
  } else {
    
  }
  trader_heartbeat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_heartbeat);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_heartbeat)
}

// string trader_encrymethod = 17;
inline void tradergateway_req_trader::clear_trader_encrymethod() {
  trader_encrymethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_encrymethod() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
  return trader_encrymethod_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_encrymethod(const ::std::string& value) {
  
  trader_encrymethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_encrymethod(::std::string&& value) {
  
  trader_encrymethod_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
}
#endif
inline void tradergateway_req_trader::set_trader_encrymethod(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_encrymethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
}
inline void tradergateway_req_trader::set_trader_encrymethod(const char* value, size_t size) {
  
  trader_encrymethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_encrymethod() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
  return trader_encrymethod_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_encrymethod() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
  
  return trader_encrymethod_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_encrymethod(::std::string* trader_encrymethod) {
  if (trader_encrymethod != NULL) {
    
  } else {
    
  }
  trader_encrymethod_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_encrymethod);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_encrymethod)
}

// string trader_rawdatalength = 18;
inline void tradergateway_req_trader::clear_trader_rawdatalength() {
  trader_rawdatalength_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_rawdatalength() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
  return trader_rawdatalength_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_rawdatalength(const ::std::string& value) {
  
  trader_rawdatalength_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_rawdatalength(::std::string&& value) {
  
  trader_rawdatalength_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
}
#endif
inline void tradergateway_req_trader::set_trader_rawdatalength(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_rawdatalength_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
}
inline void tradergateway_req_trader::set_trader_rawdatalength(const char* value, size_t size) {
  
  trader_rawdatalength_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_rawdatalength() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
  return trader_rawdatalength_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_rawdatalength() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
  
  return trader_rawdatalength_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_rawdatalength(::std::string* trader_rawdatalength) {
  if (trader_rawdatalength != NULL) {
    
  } else {
    
  }
  trader_rawdatalength_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_rawdatalength);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rawdatalength)
}

// string trader_rejectmessage = 19;
inline void tradergateway_req_trader::clear_trader_rejectmessage() {
  trader_rejectmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_rejectmessage() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
  return trader_rejectmessage_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_rejectmessage(const ::std::string& value) {
  
  trader_rejectmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_rejectmessage(::std::string&& value) {
  
  trader_rejectmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
}
#endif
inline void tradergateway_req_trader::set_trader_rejectmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_rejectmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
}
inline void tradergateway_req_trader::set_trader_rejectmessage(const char* value, size_t size) {
  
  trader_rejectmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_rejectmessage() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
  return trader_rejectmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_rejectmessage() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
  
  return trader_rejectmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_rejectmessage(::std::string* trader_rejectmessage) {
  if (trader_rejectmessage != NULL) {
    
  } else {
    
  }
  trader_rejectmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_rejectmessage);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_rejectmessage)
}

// string trader_txpassword = 20;
inline void tradergateway_req_trader::clear_trader_txpassword() {
  trader_txpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_trader::trader_txpassword() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
  return trader_txpassword_.GetNoArena();
}
inline void tradergateway_req_trader::set_trader_txpassword(const ::std::string& value) {
  
  trader_txpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
}
#if LANG_CXX11
inline void tradergateway_req_trader::set_trader_txpassword(::std::string&& value) {
  
  trader_txpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
}
#endif
inline void tradergateway_req_trader::set_trader_txpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trader_txpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
}
inline void tradergateway_req_trader::set_trader_txpassword(const char* value, size_t size) {
  
  trader_txpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
}
inline ::std::string* tradergateway_req_trader::mutable_trader_txpassword() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
  return trader_txpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_trader::release_trader_txpassword() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
  
  return trader_txpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_trader::set_allocated_trader_txpassword(::std::string* trader_txpassword) {
  if (trader_txpassword != NULL) {
    
  } else {
    
  }
  trader_txpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trader_txpassword);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.trader.trader_txpassword)
}

// -------------------------------------------------------------------

// tradergateway_req_gateway_status

// string gateway_islogin = 1;
inline void tradergateway_req_gateway_status::clear_gateway_islogin() {
  gateway_islogin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_gateway_status::gateway_islogin() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
  return gateway_islogin_.GetNoArena();
}
inline void tradergateway_req_gateway_status::set_gateway_islogin(const ::std::string& value) {
  
  gateway_islogin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
}
#if LANG_CXX11
inline void tradergateway_req_gateway_status::set_gateway_islogin(::std::string&& value) {
  
  gateway_islogin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
}
#endif
inline void tradergateway_req_gateway_status::set_gateway_islogin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_islogin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
}
inline void tradergateway_req_gateway_status::set_gateway_islogin(const char* value, size_t size) {
  
  gateway_islogin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
}
inline ::std::string* tradergateway_req_gateway_status::mutable_gateway_islogin() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
  return gateway_islogin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_gateway_status::release_gateway_islogin() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
  
  return gateway_islogin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_gateway_status::set_allocated_gateway_islogin(::std::string* gateway_islogin) {
  if (gateway_islogin != NULL) {
    
  } else {
    
  }
  gateway_islogin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_islogin);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_islogin)
}

// string gateway_iserror = 2;
inline void tradergateway_req_gateway_status::clear_gateway_iserror() {
  gateway_iserror_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_gateway_status::gateway_iserror() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
  return gateway_iserror_.GetNoArena();
}
inline void tradergateway_req_gateway_status::set_gateway_iserror(const ::std::string& value) {
  
  gateway_iserror_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
}
#if LANG_CXX11
inline void tradergateway_req_gateway_status::set_gateway_iserror(::std::string&& value) {
  
  gateway_iserror_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
}
#endif
inline void tradergateway_req_gateway_status::set_gateway_iserror(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_iserror_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
}
inline void tradergateway_req_gateway_status::set_gateway_iserror(const char* value, size_t size) {
  
  gateway_iserror_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
}
inline ::std::string* tradergateway_req_gateway_status::mutable_gateway_iserror() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
  return gateway_iserror_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_gateway_status::release_gateway_iserror() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
  
  return gateway_iserror_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_gateway_status::set_allocated_gateway_iserror(::std::string* gateway_iserror) {
  if (gateway_iserror != NULL) {
    
  } else {
    
  }
  gateway_iserror_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_iserror);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_status.gateway_iserror)
}

// -------------------------------------------------------------------

// tradergateway_req_order

// string order = 1;
inline void tradergateway_req_order::clear_order() {
  order_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req_order::order() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
  return order_.GetNoArena();
}
inline void tradergateway_req_order::set_order(const ::std::string& value) {
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
}
#if LANG_CXX11
inline void tradergateway_req_order::set_order(::std::string&& value) {
  
  order_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
}
#endif
inline void tradergateway_req_order::set_order(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
}
inline void tradergateway_req_order::set_order(const char* value, size_t size) {
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
}
inline ::std::string* tradergateway_req_order::mutable_order() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
  return order_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req_order::release_order() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
  
  return order_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req_order::set_allocated_order(::std::string* order) {
  if (order != NULL) {
    
  } else {
    
  }
  order_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.order.order)
}

// -------------------------------------------------------------------

// tradergateway_req

// string gateway_broker = 1;
inline void tradergateway_req::clear_gateway_broker() {
  gateway_broker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_broker() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
  return gateway_broker_.GetNoArena();
}
inline void tradergateway_req::set_gateway_broker(const ::std::string& value) {
  
  gateway_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_broker(::std::string&& value) {
  
  gateway_broker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
}
#endif
inline void tradergateway_req::set_gateway_broker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
}
inline void tradergateway_req::set_gateway_broker(const char* value, size_t size) {
  
  gateway_broker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
}
inline ::std::string* tradergateway_req::mutable_gateway_broker() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
  return gateway_broker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_broker() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
  
  return gateway_broker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_broker(::std::string* gateway_broker) {
  if (gateway_broker != NULL) {
    
  } else {
    
  }
  gateway_broker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_broker);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_broker)
}

// string gateway_user = 2;
inline void tradergateway_req::clear_gateway_user() {
  gateway_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_user() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
  return gateway_user_.GetNoArena();
}
inline void tradergateway_req::set_gateway_user(const ::std::string& value) {
  
  gateway_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_user(::std::string&& value) {
  
  gateway_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
}
#endif
inline void tradergateway_req::set_gateway_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
}
inline void tradergateway_req::set_gateway_user(const char* value, size_t size) {
  
  gateway_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
}
inline ::std::string* tradergateway_req::mutable_gateway_user() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
  return gateway_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_user() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
  
  return gateway_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_user(::std::string* gateway_user) {
  if (gateway_user != NULL) {
    
  } else {
    
  }
  gateway_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_user);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_user)
}

// string gateway_password = 3;
inline void tradergateway_req::clear_gateway_password() {
  gateway_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_password() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
  return gateway_password_.GetNoArena();
}
inline void tradergateway_req::set_gateway_password(const ::std::string& value) {
  
  gateway_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_password(::std::string&& value) {
  
  gateway_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
}
#endif
inline void tradergateway_req::set_gateway_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
}
inline void tradergateway_req::set_gateway_password(const char* value, size_t size) {
  
  gateway_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
}
inline ::std::string* tradergateway_req::mutable_gateway_password() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
  return gateway_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_password() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
  
  return gateway_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_password(::std::string* gateway_password) {
  if (gateway_password != NULL) {
    
  } else {
    
  }
  gateway_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_password);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_password)
}

// string gateway_token = 4;
inline void tradergateway_req::clear_gateway_token() {
  gateway_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_token() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
  return gateway_token_.GetNoArena();
}
inline void tradergateway_req::set_gateway_token(const ::std::string& value) {
  
  gateway_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_token(::std::string&& value) {
  
  gateway_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
}
#endif
inline void tradergateway_req::set_gateway_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
}
inline void tradergateway_req::set_gateway_token(const char* value, size_t size) {
  
  gateway_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
}
inline ::std::string* tradergateway_req::mutable_gateway_token() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
  return gateway_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_token() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
  
  return gateway_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_token(::std::string* gateway_token) {
  if (gateway_token != NULL) {
    
  } else {
    
  }
  gateway_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_token);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_token)
}

// string gateway_session = 5;
inline void tradergateway_req::clear_gateway_session() {
  gateway_session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_session() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
  return gateway_session_.GetNoArena();
}
inline void tradergateway_req::set_gateway_session(const ::std::string& value) {
  
  gateway_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_session(::std::string&& value) {
  
  gateway_session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
}
#endif
inline void tradergateway_req::set_gateway_session(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
}
inline void tradergateway_req::set_gateway_session(const char* value, size_t size) {
  
  gateway_session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
}
inline ::std::string* tradergateway_req::mutable_gateway_session() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
  return gateway_session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_session() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
  
  return gateway_session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_session(::std::string* gateway_session) {
  if (gateway_session != NULL) {
    
  } else {
    
  }
  gateway_session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_session);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_session)
}

// string gateway_message = 6;
inline void tradergateway_req::clear_gateway_message() {
  gateway_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tradergateway_req::gateway_message() const {
  // @@protoc_insertion_point(field_get:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
  return gateway_message_.GetNoArena();
}
inline void tradergateway_req::set_gateway_message(const ::std::string& value) {
  
  gateway_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
}
#if LANG_CXX11
inline void tradergateway_req::set_gateway_message(::std::string&& value) {
  
  gateway_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
}
#endif
inline void tradergateway_req::set_gateway_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gateway_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
}
inline void tradergateway_req::set_gateway_message(const char* value, size_t size) {
  
  gateway_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
}
inline ::std::string* tradergateway_req::mutable_gateway_message() {
  
  // @@protoc_insertion_point(field_mutable:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
  return gateway_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tradergateway_req::release_gateway_message() {
  // @@protoc_insertion_point(field_release:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
  
  return gateway_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tradergateway_req::set_allocated_gateway_message(::std::string* gateway_message) {
  if (gateway_message != NULL) {
    
  } else {
    
  }
  gateway_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gateway_message);
  // @@protoc_insertion_point(field_set_allocated:QUANTAXIS_Runtime_Tradergateway.tradergateway_req.gateway_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace QUANTAXIS_Runtime_Tradergateway

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tradergateway_2eproto__INCLUDED
