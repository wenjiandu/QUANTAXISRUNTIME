// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradergateway.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QUANTAXISRuntimeTradergateway {

  /// <summary>Holder for reflection information generated from tradergateway.proto</summary>
  public static partial class TradergatewayReflection {

    #region Descriptor
    /// <summary>File descriptor for tradergateway.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradergatewayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN0cmFkZXJnYXRld2F5LnByb3RvEh9RVUFOVEFYSVNfUnVudGltZV9UcmFk",
            "ZXJnYXRld2F5ItIFChF0cmFkZXJnYXRld2F5X3JlcRIWCg5nYXRld2F5X2Jy",
            "b2tlchgBIAEoCRIUCgxnYXRld2F5X3VzZXIYAiABKAkSGAoQZ2F0ZXdheV9w",
            "YXNzd29yZBgDIAEoCRIVCg1nYXRld2F5X3Rva2VuGAQgASgJEhcKD2dhdGV3",
            "YXlfc2Vzc2lvbhgFIAEoCRIXCg9nYXRld2F5X21lc3NhZ2UYBiABKAka5wMK",
            "BnRyYWRlchIVCg10cmFkZXJfYnJva2VyGAEgASgJEhMKC3RyYWRlcl91c2Vy",
            "GAIgASgJEhcKD3RyYWRlcl9wYXNzd29yZBgDIAEoCRIUCgx0cmFkZXJfdG9r",
            "ZW4YBCABKAkSFgoOdHJhZGVyX3Nlc3Npb24YBSABKAkSEQoJdHJhZGVyX2lw",
            "GAYgASgJEhMKC3RyYWRlcl9wb3J0GAcgASgJEhwKFHRyYWRlcl9jbGllbnR2",
            "ZXJzaW9uGAggASgJEhIKCnRyYWRlcl9yZXQYCSABKAkSHAoUdHJhZGVyX2Vy",
            "cm9yX2NvbnRleHQYCiABKAkSFwoPdHJhZGVyX2Vycm9yX2lkGAsgASgJEhUK",
            "DXRyYWRlcl9kZXBfaWQYDCABKAkSHQoVdHJhZGVyX2NyZWRpdF9hY2NvdW50",
            "GA0gASgJEhwKFHRyYWRlcl9hY2NvdW50X21vZGVsGA4gASgJEhMKC3RyYWRl",
            "cl90aW1lGA8gASgJEhgKEHRyYWRlcl9oZWFydGJlYXQYECABKAkSGgoSdHJh",
            "ZGVyX2VuY3J5bWV0aG9kGBEgASgJEhwKFHRyYWRlcl9yYXdkYXRhbGVuZ3Ro",
            "GBIgASgJEhwKFHRyYWRlcl9yZWplY3RtZXNzYWdlGBMgASgJGkIKDmdhdGV3",
            "YXlfc3RhdHVzEhcKD2dhdGV3YXlfaXNsb2dpbhgBIAEoCRIXCg9nYXRld2F5",
            "X2lzZXJyb3IYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeTradergateway.tradergateway_req), global::QUANTAXISRuntimeTradergateway.tradergateway_req.Parser, new[]{ "GatewayBroker", "GatewayUser", "GatewayPassword", "GatewayToken", "GatewaySession", "GatewayMessage" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeTradergateway.tradergateway_req.Types.trader), global::QUANTAXISRuntimeTradergateway.tradergateway_req.Types.trader.Parser, new[]{ "TraderBroker", "TraderUser", "TraderPassword", "TraderToken", "TraderSession", "TraderIp", "TraderPort", "TraderClientversion", "TraderRet", "TraderErrorContext", "TraderErrorId", "TraderDepId", "TraderCreditAccount", "TraderAccountModel", "TraderTime", "TraderHeartbeat", "TraderEncrymethod", "TraderRawdatalength", "TraderRejectmessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeTradergateway.tradergateway_req.Types.gateway_status), global::QUANTAXISRuntimeTradergateway.tradergateway_req.Types.gateway_status.Parser, new[]{ "GatewayIslogin", "GatewayIserror" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class tradergateway_req : pb::IMessage<tradergateway_req> {
    private static readonly pb::MessageParser<tradergateway_req> _parser = new pb::MessageParser<tradergateway_req>(() => new tradergateway_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tradergateway_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QUANTAXISRuntimeTradergateway.TradergatewayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradergateway_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradergateway_req(tradergateway_req other) : this() {
      gatewayBroker_ = other.gatewayBroker_;
      gatewayUser_ = other.gatewayUser_;
      gatewayPassword_ = other.gatewayPassword_;
      gatewayToken_ = other.gatewayToken_;
      gatewaySession_ = other.gatewaySession_;
      gatewayMessage_ = other.gatewayMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradergateway_req Clone() {
      return new tradergateway_req(this);
    }

    /// <summary>Field number for the "gateway_broker" field.</summary>
    public const int GatewayBrokerFieldNumber = 1;
    private string gatewayBroker_ = "";
    /// <summary>
    ///网关层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayBroker {
      get { return gatewayBroker_; }
      set {
        gatewayBroker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_user" field.</summary>
    public const int GatewayUserFieldNumber = 2;
    private string gatewayUser_ = "";
    /// <summary>
    /// 网关用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayUser {
      get { return gatewayUser_; }
      set {
        gatewayUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_password" field.</summary>
    public const int GatewayPasswordFieldNumber = 3;
    private string gatewayPassword_ = "";
    /// <summary>
    ///网关密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayPassword {
      get { return gatewayPassword_; }
      set {
        gatewayPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_token" field.</summary>
    public const int GatewayTokenFieldNumber = 4;
    private string gatewayToken_ = "";
    /// <summary>
    ///网关认证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayToken {
      get { return gatewayToken_; }
      set {
        gatewayToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_session" field.</summary>
    public const int GatewaySessionFieldNumber = 5;
    private string gatewaySession_ = "";
    /// <summary>
    ///网关session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewaySession {
      get { return gatewaySession_; }
      set {
        gatewaySession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateway_message" field.</summary>
    public const int GatewayMessageFieldNumber = 6;
    private string gatewayMessage_ = "";
    /// <summary>
    ///网关消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayMessage {
      get { return gatewayMessage_; }
      set {
        gatewayMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tradergateway_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tradergateway_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GatewayBroker != other.GatewayBroker) return false;
      if (GatewayUser != other.GatewayUser) return false;
      if (GatewayPassword != other.GatewayPassword) return false;
      if (GatewayToken != other.GatewayToken) return false;
      if (GatewaySession != other.GatewaySession) return false;
      if (GatewayMessage != other.GatewayMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GatewayBroker.Length != 0) hash ^= GatewayBroker.GetHashCode();
      if (GatewayUser.Length != 0) hash ^= GatewayUser.GetHashCode();
      if (GatewayPassword.Length != 0) hash ^= GatewayPassword.GetHashCode();
      if (GatewayToken.Length != 0) hash ^= GatewayToken.GetHashCode();
      if (GatewaySession.Length != 0) hash ^= GatewaySession.GetHashCode();
      if (GatewayMessage.Length != 0) hash ^= GatewayMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GatewayBroker.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GatewayBroker);
      }
      if (GatewayUser.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GatewayUser);
      }
      if (GatewayPassword.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GatewayPassword);
      }
      if (GatewayToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GatewayToken);
      }
      if (GatewaySession.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GatewaySession);
      }
      if (GatewayMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GatewayMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GatewayBroker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayBroker);
      }
      if (GatewayUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayUser);
      }
      if (GatewayPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayPassword);
      }
      if (GatewayToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayToken);
      }
      if (GatewaySession.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewaySession);
      }
      if (GatewayMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tradergateway_req other) {
      if (other == null) {
        return;
      }
      if (other.GatewayBroker.Length != 0) {
        GatewayBroker = other.GatewayBroker;
      }
      if (other.GatewayUser.Length != 0) {
        GatewayUser = other.GatewayUser;
      }
      if (other.GatewayPassword.Length != 0) {
        GatewayPassword = other.GatewayPassword;
      }
      if (other.GatewayToken.Length != 0) {
        GatewayToken = other.GatewayToken;
      }
      if (other.GatewaySession.Length != 0) {
        GatewaySession = other.GatewaySession;
      }
      if (other.GatewayMessage.Length != 0) {
        GatewayMessage = other.GatewayMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GatewayBroker = input.ReadString();
            break;
          }
          case 18: {
            GatewayUser = input.ReadString();
            break;
          }
          case 26: {
            GatewayPassword = input.ReadString();
            break;
          }
          case 34: {
            GatewayToken = input.ReadString();
            break;
          }
          case 42: {
            GatewaySession = input.ReadString();
            break;
          }
          case 50: {
            GatewayMessage = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the tradergateway_req message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class trader : pb::IMessage<trader> {
        private static readonly pb::MessageParser<trader> _parser = new pb::MessageParser<trader>(() => new trader());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<trader> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::QUANTAXISRuntimeTradergateway.tradergateway_req.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public trader() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public trader(trader other) : this() {
          traderBroker_ = other.traderBroker_;
          traderUser_ = other.traderUser_;
          traderPassword_ = other.traderPassword_;
          traderToken_ = other.traderToken_;
          traderSession_ = other.traderSession_;
          traderIp_ = other.traderIp_;
          traderPort_ = other.traderPort_;
          traderClientversion_ = other.traderClientversion_;
          traderRet_ = other.traderRet_;
          traderErrorContext_ = other.traderErrorContext_;
          traderErrorId_ = other.traderErrorId_;
          traderDepId_ = other.traderDepId_;
          traderCreditAccount_ = other.traderCreditAccount_;
          traderAccountModel_ = other.traderAccountModel_;
          traderTime_ = other.traderTime_;
          traderHeartbeat_ = other.traderHeartbeat_;
          traderEncrymethod_ = other.traderEncrymethod_;
          traderRawdatalength_ = other.traderRawdatalength_;
          traderRejectmessage_ = other.traderRejectmessage_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public trader Clone() {
          return new trader(this);
        }

        /// <summary>Field number for the "trader_broker" field.</summary>
        public const int TraderBrokerFieldNumber = 1;
        private string traderBroker_ = "";
        /// <summary>
        /// 会话层消息
        ///trader_setting 是指 对应的下单接口的设置
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderBroker {
          get { return traderBroker_; }
          set {
            traderBroker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_user" field.</summary>
        public const int TraderUserFieldNumber = 2;
        private string traderUser_ = "";
        /// <summary>
        ///下单接口登录(可选)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderUser {
          get { return traderUser_; }
          set {
            traderUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_password" field.</summary>
        public const int TraderPasswordFieldNumber = 3;
        private string traderPassword_ = "";
        /// <summary>
        ///下单接口登录(可选)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderPassword {
          get { return traderPassword_; }
          set {
            traderPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_token" field.</summary>
        public const int TraderTokenFieldNumber = 4;
        private string traderToken_ = "";
        /// <summary>
        ///下单接口另外的登录模式
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderToken {
          get { return traderToken_; }
          set {
            traderToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_session" field.</summary>
        public const int TraderSessionFieldNumber = 5;
        private string traderSession_ = "";
        /// <summary>
        ///下单接口的session(xtp需要)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderSession {
          get { return traderSession_; }
          set {
            traderSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_ip" field.</summary>
        public const int TraderIpFieldNumber = 6;
        private string traderIp_ = "";
        /// <summary>
        ///交易服务器
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderIp {
          get { return traderIp_; }
          set {
            traderIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_port" field.</summary>
        public const int TraderPortFieldNumber = 7;
        private string traderPort_ = "";
        /// <summary>
        ///交易端口
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderPort {
          get { return traderPort_; }
          set {
            traderPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_clientversion" field.</summary>
        public const int TraderClientversionFieldNumber = 8;
        private string traderClientversion_ = "";
        /// <summary>
        ///trader客户端id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderClientversion {
          get { return traderClientversion_; }
          set {
            traderClientversion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_ret" field.</summary>
        public const int TraderRetFieldNumber = 9;
        private string traderRet_ = "";
        /// <summary>
        ///连接状态
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderRet {
          get { return traderRet_; }
          set {
            traderRet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_error_context" field.</summary>
        public const int TraderErrorContextFieldNumber = 10;
        private string traderErrorContext_ = "";
        /// <summary>
        ///错误信息
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderErrorContext {
          get { return traderErrorContext_; }
          set {
            traderErrorContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_error_id" field.</summary>
        public const int TraderErrorIdFieldNumber = 11;
        private string traderErrorId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderErrorId {
          get { return traderErrorId_; }
          set {
            traderErrorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_dep_id" field.</summary>
        public const int TraderDepIdFieldNumber = 12;
        private string traderDepId_ = "";
        /// <summary>
        ///营业部id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderDepId {
          get { return traderDepId_; }
          set {
            traderDepId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_credit_account" field.</summary>
        public const int TraderCreditAccountFieldNumber = 13;
        private string traderCreditAccount_ = "";
        /// <summary>
        ///是否为融资融券账户
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderCreditAccount {
          get { return traderCreditAccount_; }
          set {
            traderCreditAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_account_model" field.</summary>
        public const int TraderAccountModelFieldNumber = 14;
        private string traderAccountModel_ = "";
        /// <summary>
        ///账号模式  资金账号,客户账号
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderAccountModel {
          get { return traderAccountModel_; }
          set {
            traderAccountModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_time" field.</summary>
        public const int TraderTimeFieldNumber = 15;
        private string traderTime_ = "";
        /// <summary>
        ///初始化时服务器时间戳
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderTime {
          get { return traderTime_; }
          set {
            traderTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_heartbeat" field.</summary>
        public const int TraderHeartbeatFieldNumber = 16;
        private string traderHeartbeat_ = "";
        /// <summary>
        ///下单接口的心跳间隔(方正证券)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderHeartbeat {
          get { return traderHeartbeat_; }
          set {
            traderHeartbeat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_encrymethod" field.</summary>
        public const int TraderEncrymethodFieldNumber = 17;
        private string traderEncrymethod_ = "";
        /// <summary>
        ///下单接口的加密方式
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderEncrymethod {
          get { return traderEncrymethod_; }
          set {
            traderEncrymethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_rawdatalength" field.</summary>
        public const int TraderRawdatalengthFieldNumber = 18;
        private string traderRawdatalength_ = "";
        /// <summary>
        ///数据原始长度
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderRawdatalength {
          get { return traderRawdatalength_; }
          set {
            traderRawdatalength_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trader_rejectmessage" field.</summary>
        public const int TraderRejectmessageFieldNumber = 19;
        private string traderRejectmessage_ = "";
        /// <summary>
        ///下单接口被拒绝消息*方正证券
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraderRejectmessage {
          get { return traderRejectmessage_; }
          set {
            traderRejectmessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as trader);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(trader other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TraderBroker != other.TraderBroker) return false;
          if (TraderUser != other.TraderUser) return false;
          if (TraderPassword != other.TraderPassword) return false;
          if (TraderToken != other.TraderToken) return false;
          if (TraderSession != other.TraderSession) return false;
          if (TraderIp != other.TraderIp) return false;
          if (TraderPort != other.TraderPort) return false;
          if (TraderClientversion != other.TraderClientversion) return false;
          if (TraderRet != other.TraderRet) return false;
          if (TraderErrorContext != other.TraderErrorContext) return false;
          if (TraderErrorId != other.TraderErrorId) return false;
          if (TraderDepId != other.TraderDepId) return false;
          if (TraderCreditAccount != other.TraderCreditAccount) return false;
          if (TraderAccountModel != other.TraderAccountModel) return false;
          if (TraderTime != other.TraderTime) return false;
          if (TraderHeartbeat != other.TraderHeartbeat) return false;
          if (TraderEncrymethod != other.TraderEncrymethod) return false;
          if (TraderRawdatalength != other.TraderRawdatalength) return false;
          if (TraderRejectmessage != other.TraderRejectmessage) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TraderBroker.Length != 0) hash ^= TraderBroker.GetHashCode();
          if (TraderUser.Length != 0) hash ^= TraderUser.GetHashCode();
          if (TraderPassword.Length != 0) hash ^= TraderPassword.GetHashCode();
          if (TraderToken.Length != 0) hash ^= TraderToken.GetHashCode();
          if (TraderSession.Length != 0) hash ^= TraderSession.GetHashCode();
          if (TraderIp.Length != 0) hash ^= TraderIp.GetHashCode();
          if (TraderPort.Length != 0) hash ^= TraderPort.GetHashCode();
          if (TraderClientversion.Length != 0) hash ^= TraderClientversion.GetHashCode();
          if (TraderRet.Length != 0) hash ^= TraderRet.GetHashCode();
          if (TraderErrorContext.Length != 0) hash ^= TraderErrorContext.GetHashCode();
          if (TraderErrorId.Length != 0) hash ^= TraderErrorId.GetHashCode();
          if (TraderDepId.Length != 0) hash ^= TraderDepId.GetHashCode();
          if (TraderCreditAccount.Length != 0) hash ^= TraderCreditAccount.GetHashCode();
          if (TraderAccountModel.Length != 0) hash ^= TraderAccountModel.GetHashCode();
          if (TraderTime.Length != 0) hash ^= TraderTime.GetHashCode();
          if (TraderHeartbeat.Length != 0) hash ^= TraderHeartbeat.GetHashCode();
          if (TraderEncrymethod.Length != 0) hash ^= TraderEncrymethod.GetHashCode();
          if (TraderRawdatalength.Length != 0) hash ^= TraderRawdatalength.GetHashCode();
          if (TraderRejectmessage.Length != 0) hash ^= TraderRejectmessage.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TraderBroker.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TraderBroker);
          }
          if (TraderUser.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TraderUser);
          }
          if (TraderPassword.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TraderPassword);
          }
          if (TraderToken.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(TraderToken);
          }
          if (TraderSession.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(TraderSession);
          }
          if (TraderIp.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(TraderIp);
          }
          if (TraderPort.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(TraderPort);
          }
          if (TraderClientversion.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(TraderClientversion);
          }
          if (TraderRet.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(TraderRet);
          }
          if (TraderErrorContext.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(TraderErrorContext);
          }
          if (TraderErrorId.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(TraderErrorId);
          }
          if (TraderDepId.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(TraderDepId);
          }
          if (TraderCreditAccount.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(TraderCreditAccount);
          }
          if (TraderAccountModel.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(TraderAccountModel);
          }
          if (TraderTime.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(TraderTime);
          }
          if (TraderHeartbeat.Length != 0) {
            output.WriteRawTag(130, 1);
            output.WriteString(TraderHeartbeat);
          }
          if (TraderEncrymethod.Length != 0) {
            output.WriteRawTag(138, 1);
            output.WriteString(TraderEncrymethod);
          }
          if (TraderRawdatalength.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(TraderRawdatalength);
          }
          if (TraderRejectmessage.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(TraderRejectmessage);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TraderBroker.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderBroker);
          }
          if (TraderUser.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderUser);
          }
          if (TraderPassword.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderPassword);
          }
          if (TraderToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderToken);
          }
          if (TraderSession.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderSession);
          }
          if (TraderIp.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderIp);
          }
          if (TraderPort.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderPort);
          }
          if (TraderClientversion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderClientversion);
          }
          if (TraderRet.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderRet);
          }
          if (TraderErrorContext.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderErrorContext);
          }
          if (TraderErrorId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderErrorId);
          }
          if (TraderDepId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderDepId);
          }
          if (TraderCreditAccount.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderCreditAccount);
          }
          if (TraderAccountModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderAccountModel);
          }
          if (TraderTime.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderTime);
          }
          if (TraderHeartbeat.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderHeartbeat);
          }
          if (TraderEncrymethod.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderEncrymethod);
          }
          if (TraderRawdatalength.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderRawdatalength);
          }
          if (TraderRejectmessage.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(TraderRejectmessage);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(trader other) {
          if (other == null) {
            return;
          }
          if (other.TraderBroker.Length != 0) {
            TraderBroker = other.TraderBroker;
          }
          if (other.TraderUser.Length != 0) {
            TraderUser = other.TraderUser;
          }
          if (other.TraderPassword.Length != 0) {
            TraderPassword = other.TraderPassword;
          }
          if (other.TraderToken.Length != 0) {
            TraderToken = other.TraderToken;
          }
          if (other.TraderSession.Length != 0) {
            TraderSession = other.TraderSession;
          }
          if (other.TraderIp.Length != 0) {
            TraderIp = other.TraderIp;
          }
          if (other.TraderPort.Length != 0) {
            TraderPort = other.TraderPort;
          }
          if (other.TraderClientversion.Length != 0) {
            TraderClientversion = other.TraderClientversion;
          }
          if (other.TraderRet.Length != 0) {
            TraderRet = other.TraderRet;
          }
          if (other.TraderErrorContext.Length != 0) {
            TraderErrorContext = other.TraderErrorContext;
          }
          if (other.TraderErrorId.Length != 0) {
            TraderErrorId = other.TraderErrorId;
          }
          if (other.TraderDepId.Length != 0) {
            TraderDepId = other.TraderDepId;
          }
          if (other.TraderCreditAccount.Length != 0) {
            TraderCreditAccount = other.TraderCreditAccount;
          }
          if (other.TraderAccountModel.Length != 0) {
            TraderAccountModel = other.TraderAccountModel;
          }
          if (other.TraderTime.Length != 0) {
            TraderTime = other.TraderTime;
          }
          if (other.TraderHeartbeat.Length != 0) {
            TraderHeartbeat = other.TraderHeartbeat;
          }
          if (other.TraderEncrymethod.Length != 0) {
            TraderEncrymethod = other.TraderEncrymethod;
          }
          if (other.TraderRawdatalength.Length != 0) {
            TraderRawdatalength = other.TraderRawdatalength;
          }
          if (other.TraderRejectmessage.Length != 0) {
            TraderRejectmessage = other.TraderRejectmessage;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TraderBroker = input.ReadString();
                break;
              }
              case 18: {
                TraderUser = input.ReadString();
                break;
              }
              case 26: {
                TraderPassword = input.ReadString();
                break;
              }
              case 34: {
                TraderToken = input.ReadString();
                break;
              }
              case 42: {
                TraderSession = input.ReadString();
                break;
              }
              case 50: {
                TraderIp = input.ReadString();
                break;
              }
              case 58: {
                TraderPort = input.ReadString();
                break;
              }
              case 66: {
                TraderClientversion = input.ReadString();
                break;
              }
              case 74: {
                TraderRet = input.ReadString();
                break;
              }
              case 82: {
                TraderErrorContext = input.ReadString();
                break;
              }
              case 90: {
                TraderErrorId = input.ReadString();
                break;
              }
              case 98: {
                TraderDepId = input.ReadString();
                break;
              }
              case 106: {
                TraderCreditAccount = input.ReadString();
                break;
              }
              case 114: {
                TraderAccountModel = input.ReadString();
                break;
              }
              case 122: {
                TraderTime = input.ReadString();
                break;
              }
              case 130: {
                TraderHeartbeat = input.ReadString();
                break;
              }
              case 138: {
                TraderEncrymethod = input.ReadString();
                break;
              }
              case 146: {
                TraderRawdatalength = input.ReadString();
                break;
              }
              case 154: {
                TraderRejectmessage = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class gateway_status : pb::IMessage<gateway_status> {
        private static readonly pb::MessageParser<gateway_status> _parser = new pb::MessageParser<gateway_status>(() => new gateway_status());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<gateway_status> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::QUANTAXISRuntimeTradergateway.tradergateway_req.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public gateway_status() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public gateway_status(gateway_status other) : this() {
          gatewayIslogin_ = other.gatewayIslogin_;
          gatewayIserror_ = other.gatewayIserror_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public gateway_status Clone() {
          return new gateway_status(this);
        }

        /// <summary>Field number for the "gateway_islogin" field.</summary>
        public const int GatewayIsloginFieldNumber = 1;
        private string gatewayIslogin_ = "";
        /// <summary>
        ///状态:是否登录
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GatewayIslogin {
          get { return gatewayIslogin_; }
          set {
            gatewayIslogin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "gateway_iserror" field.</summary>
        public const int GatewayIserrorFieldNumber = 2;
        private string gatewayIserror_ = "";
        /// <summary>
        ///状态:是否出现错误
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GatewayIserror {
          get { return gatewayIserror_; }
          set {
            gatewayIserror_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as gateway_status);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(gateway_status other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GatewayIslogin != other.GatewayIslogin) return false;
          if (GatewayIserror != other.GatewayIserror) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GatewayIslogin.Length != 0) hash ^= GatewayIslogin.GetHashCode();
          if (GatewayIserror.Length != 0) hash ^= GatewayIserror.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GatewayIslogin.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GatewayIslogin);
          }
          if (GatewayIserror.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(GatewayIserror);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GatewayIslogin.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayIslogin);
          }
          if (GatewayIserror.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayIserror);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(gateway_status other) {
          if (other == null) {
            return;
          }
          if (other.GatewayIslogin.Length != 0) {
            GatewayIslogin = other.GatewayIslogin;
          }
          if (other.GatewayIserror.Length != 0) {
            GatewayIserror = other.GatewayIserror;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GatewayIslogin = input.ReadString();
                break;
              }
              case 18: {
                GatewayIserror = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
