// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quotation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QUANTAXISRuntimeQuotation {

  /// <summary>Holder for reflection information generated from quotation.proto</summary>
  public static partial class QuotationReflection {

    #region Descriptor
    /// <summary>File descriptor for quotation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuotationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9xdW90YXRpb24ucHJvdG8SG1FVQU5UQVhJU19SdW50aW1lX1F1b3RhdGlv",
            "biJ2Cg1xdW90YXRpb25fcmVxEhAKCGV4Y2hhbmdlGAEgASgJEgwKBHR5cGUY",
            "AiABKAkSDAoEY29kZRgDIAEoCRIKCgJpcBgEIAEoCRIMCgR0aW1lGAUgASgJ",
            "EgwKBGRhdGUYBiABKAkSDwoHbWVzc2FnZRgHIAEoCSLuAQoNcXVvdGF0aW9u",
            "X3JlcBIMCgRjb2RlGAEgASgJEgwKBG9wZW4YAiABKAISDAoEaGlnaBgDIAEo",
            "AhILCgNsb3cYBCABKAISDQoFY2xvc2UYBSABKAISDgoGdm9sdW1lGAYgASgC",
            "EgwKBGRhdGUYByABKAkSDgoGYW1vdW50GAggASgCEhIKCmRhdGVfc3RhbXAY",
            "CSABKAkSEAoIZGF0ZXRpbWUYCiABKAkSEgoKdGltZV9zdGFtcBgLIAEoCRIP",
            "CgdtZXNzYWdlGAwgASgJEhAKCGV4Y2hhbmdlGA0gASgJEgwKBHR5cGUYDiAB",
            "KAky3wIKE1FSX1F1b3RhdGlvblNlcnZpY2USagoQUVJfcXVvdGF0aW9uX3Ay",
            "cBIqLlFVQU5UQVhJU19SdW50aW1lX1F1b3RhdGlvbi5xdW90YXRpb25fcmVx",
            "GiouUVVBTlRBWElTX1J1bnRpbWVfUXVvdGF0aW9uLnF1b3RhdGlvbl9yZXAS",
            "bAoQUUFfcXVvdGF0aW9uX3AycxIqLlFVQU5UQVhJU19SdW50aW1lX1F1b3Rh",
            "dGlvbi5xdW90YXRpb25fcmVxGiouUVVBTlRBWElTX1J1bnRpbWVfUXVvdGF0",
            "aW9uLnF1b3RhdGlvbl9yZXAwARJuChBRQV9xdW90YXRpb25fczJzEiouUVVB",
            "TlRBWElTX1J1bnRpbWVfUXVvdGF0aW9uLnF1b3RhdGlvbl9yZXEaKi5RVUFO",
            "VEFYSVNfUnVudGltZV9RdW90YXRpb24ucXVvdGF0aW9uX3JlcCgBMAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeQuotation.quotation_req), global::QUANTAXISRuntimeQuotation.quotation_req.Parser, new[]{ "Exchange", "Type", "Code", "Ip", "Time", "Date", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QUANTAXISRuntimeQuotation.quotation_rep), global::QUANTAXISRuntimeQuotation.quotation_rep.Parser, new[]{ "Code", "Open", "High", "Low", "Close", "Volume", "Date", "Amount", "DateStamp", "Datetime", "TimeStamp", "Message", "Exchange", "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class quotation_req : pb::IMessage<quotation_req> {
    private static readonly pb::MessageParser<quotation_req> _parser = new pb::MessageParser<quotation_req>(() => new quotation_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<quotation_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QUANTAXISRuntimeQuotation.QuotationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req(quotation_req other) : this() {
      exchange_ = other.exchange_;
      type_ = other.type_;
      code_ = other.code_;
      ip_ = other.ip_;
      time_ = other.time_;
      date_ = other.date_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_req Clone() {
      return new quotation_req(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    /// sz/sh/etf/index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    ///min/day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    /// <summary>
    ///code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    private string ip_ = "";
    /// <summary>
    ///tdx ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 6;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as quotation_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(quotation_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if (Type != other.Type) return false;
      if (Code != other.Code) return false;
      if (Ip != other.Ip) return false;
      if (Time != other.Time) return false;
      if (Date != other.Date) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Time);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Date);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(quotation_req other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Time = input.ReadString();
            break;
          }
          case 50: {
            Date = input.ReadString();
            break;
          }
          case 58: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class quotation_rep : pb::IMessage<quotation_rep> {
    private static readonly pb::MessageParser<quotation_rep> _parser = new pb::MessageParser<quotation_rep>(() => new quotation_rep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<quotation_rep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QUANTAXISRuntimeQuotation.QuotationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep(quotation_rep other) : this() {
      code_ = other.code_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      date_ = other.date_;
      amount_ = other.amount_;
      dateStamp_ = other.dateStamp_;
      datetime_ = other.datetime_;
      timeStamp_ = other.timeStamp_;
      message_ = other.message_;
      exchange_ = other.exchange_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quotation_rep Clone() {
      return new quotation_rep(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private float open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 3;
    private float high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private float low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 5;
    private float close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 7;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 8;
    private float amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "date_stamp" field.</summary>
    public const int DateStampFieldNumber = 9;
    private string dateStamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateStamp {
      get { return dateStamp_; }
      set {
        dateStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 10;
    private string datetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Datetime {
      get { return datetime_; }
      set {
        datetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 11;
    private string timeStamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 12;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 13;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 14;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as quotation_rep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(quotation_rep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Open != other.Open) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Close != other.Close) return false;
      if (Volume != other.Volume) return false;
      if (Date != other.Date) return false;
      if (Amount != other.Amount) return false;
      if (DateStamp != other.DateStamp) return false;
      if (Datetime != other.Datetime) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (Message != other.Message) return false;
      if (Exchange != other.Exchange) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Open != 0F) hash ^= Open.GetHashCode();
      if (High != 0F) hash ^= High.GetHashCode();
      if (Low != 0F) hash ^= Low.GetHashCode();
      if (Close != 0F) hash ^= Close.GetHashCode();
      if (Volume != 0F) hash ^= Volume.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Amount != 0F) hash ^= Amount.GetHashCode();
      if (DateStamp.Length != 0) hash ^= DateStamp.GetHashCode();
      if (Datetime.Length != 0) hash ^= Datetime.GetHashCode();
      if (TimeStamp.Length != 0) hash ^= TimeStamp.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Open != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Open);
      }
      if (High != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(High);
      }
      if (Low != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Low);
      }
      if (Close != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Close);
      }
      if (Volume != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Volume);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Date);
      }
      if (Amount != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Amount);
      }
      if (DateStamp.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DateStamp);
      }
      if (Datetime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Datetime);
      }
      if (TimeStamp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TimeStamp);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Message);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Exchange);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Open != 0F) {
        size += 1 + 4;
      }
      if (High != 0F) {
        size += 1 + 4;
      }
      if (Low != 0F) {
        size += 1 + 4;
      }
      if (Close != 0F) {
        size += 1 + 4;
      }
      if (Volume != 0F) {
        size += 1 + 4;
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Amount != 0F) {
        size += 1 + 4;
      }
      if (DateStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateStamp);
      }
      if (Datetime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Datetime);
      }
      if (TimeStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStamp);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(quotation_rep other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Open != 0F) {
        Open = other.Open;
      }
      if (other.High != 0F) {
        High = other.High;
      }
      if (other.Low != 0F) {
        Low = other.Low;
      }
      if (other.Close != 0F) {
        Close = other.Close;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Amount != 0F) {
        Amount = other.Amount;
      }
      if (other.DateStamp.Length != 0) {
        DateStamp = other.DateStamp;
      }
      if (other.Datetime.Length != 0) {
        Datetime = other.Datetime;
      }
      if (other.TimeStamp.Length != 0) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 21: {
            Open = input.ReadFloat();
            break;
          }
          case 29: {
            High = input.ReadFloat();
            break;
          }
          case 37: {
            Low = input.ReadFloat();
            break;
          }
          case 45: {
            Close = input.ReadFloat();
            break;
          }
          case 53: {
            Volume = input.ReadFloat();
            break;
          }
          case 58: {
            Date = input.ReadString();
            break;
          }
          case 69: {
            Amount = input.ReadFloat();
            break;
          }
          case 74: {
            DateStamp = input.ReadString();
            break;
          }
          case 82: {
            Datetime = input.ReadString();
            break;
          }
          case 90: {
            TimeStamp = input.ReadString();
            break;
          }
          case 98: {
            Message = input.ReadString();
            break;
          }
          case 106: {
            Exchange = input.ReadString();
            break;
          }
          case 114: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
